{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#hypercubing","title":"Hypercubing","text":"<p>Hypercubing is a niche branch of Rubik's Cubing that focuses on solving higher dimensional twisty puzzles. The ways that twisty puzzles move are mathematically well defined, and can be generalized to higher spatial dimensions. These puzzles can then be visualized and simulated using computer software.</p> <p>The most well known 4D shape is the hypercube (also called the tesseract, 8-cell, octachoron, or 4-cube). It has 8 cubic sides that are called cells. Turning any of the cells involves rotating it like a cube to any of 24 orientations.</p>"},{"location":"#first-steps","title":"First Steps","text":"<p>Completely new to hypercubing? Check out the pages below to get started:</p> <p>Tutorial FAQ Progression</p> <p>The short article Abstracting the Rubik's Cube introduces a number of the hypercubing puzzles.</p> <p>Join the official Hypercubers Discord:</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#what-is-hypercubing","title":"What is hypercubing?","text":"What does hypercubing mean? <p>Just as cubing is the hobby of solving 3D twisty puzzles, Hypercubing is solving 4D+ twisty puzzles.</p> What is the 4th dimension? <p>Hypercubing deals with higher dimensions of space. Essentially all this means is just another direction (humans can only percieve 3 orthogonal directions, which is what makes this so challenging).</p> Isn't the 4th dimension time? <p>While time is a dimension, it behaves completely differently from the spatial dimensions. You can't move backward through it, measure shapes in it, etc. Another factor that can lead to confusion is the term spacetime or 4D spacetime. This is why physicists sometimes use the term 3+1 dimensions to describe our world, meaning that hypercubing would take place in 4+1 dimensions (or n+1 where n&gt;3).</p> <p>See https://www.qfbox.info/4d/4dfaq for answers to other similar questions.</p> What is a 4-dimensional Rubik's cube? How does that make any sense? <p>Read the MC4D FAQ</p> Where can I interact with other hypercubers? <p>Join the Hypercubers Discord Server and Hypercubing Google Group. The Discord server is generally more active. Also join the r/Hypercubers reddit.</p>"},{"location":"faq/#virtual-puzzles","title":"Virtual puzzles","text":"What program should I download? <p>It depends on what exactly you want to do, but generally Hyperspeedcube, and MC4D will suit your needs. See the software page for links to all the major programs.</p> How do I start learning to solve 4D puzzles? <p>First, download Hyperspeedcube or MC4D and start experimenting with the 34! Try to solve one-move scrambles and keep practicing that until you're comfortable. Once you can solve one-move scrambles with ease, pick a method to learn.</p> Why not start with the 24? <p>The 24 is particularly confusing for beginners because half the puzzle turns at once so it's very easy to lose your bearings. While the 24 strategy is technically simpler, it's much much more challenging to wrap your head around, especially when you're new to 4D puzzles. Just like the 33 is a better starting puzzle in 3D, you learn lots of important concepts from the 34 that will help you with other puzzles.</p> What methods exist for the 34? <p>Many 3D methods can just be scaled up and used on the 4D cube. Some notable methods are:</p> <ul> <li>Layer-by-layer</li> <li>CFOP \u2014 4D CFOP</li> <li>3Block \u2014 4D FreeFOP, ~20% fewer moves compared to CFOP</li> <li>Octachoroux \u2014 4D Roux, but awkward to use and many parity issues</li> </ul> <p>Alterantively, join others in voice chat on the Hypercubers Discord Server and someone will teach you!</p>"},{"location":"faq/#physical-puzzles","title":"Physical puzzles","text":"What is a physical 4D puzzle? <p>The physical 4D puzzles are puzzles that are perfectly analogous to the virtual 4D puzzles, but implemented in the physical world. See our physical puzzles page, the Physical Puzzle page on the Superliminal wiki, and Rowan Fortier's video about the history of physical hypercubes.</p> How do I get Melinda's Physical 24? <p>All the information can be found on the Superliminal website, including the history, statistics, and Hall of Fame.</p> Can I purchase any of Grant's hypercuboids? <p>No. Currently, they are one-of-a-kind. You would have to design and 3D print them yourself.</p> What physical 4D puzzles exist? <p>2x2x2x2, 2x2x2x3, 2x2x3x3, 2x3x3x3, and 3x3x3x3</p> Which 4D shapes can be turned into physical puzzles? <p>While it's always possible to just arrange the stickers on a table, the real challenge is in finding a design that is piece-based instead of sticker-based and fits in a compact shape that isn't too horrendous to turn. It just requires out-of-the-box thinking. We currently have several renderings for physical puzzles that haven't been built in real life yet.</p> Can a physical 5D puzzle exist? <p>In 3d space, it's difficult to find a symmetrical design to arrange 5 colors. It's possible using icosahedral symmetry, but it would be painful to use. Perhaps some clever design will be invented in the future that allows us to fully implement 5D+ puzzles.</p>"},{"location":"faq/#speedsolving","title":"Speedsolving","text":"What are the speedsolving records for 4D puzzles? <p>See the leaderboards. To get on the leaderboard, submit a video of your solve to this form.</p> Why not use speedrun.com? <p>Speedrun.com does not allow \"generic Rubik's Cube simulators.\" We applied and were rejected.</p> I don't know full OLL/PLL/ZBLL/etc. Can I still get fast at 4D? <p>Absolutely! Most 4D speed methods are highly intuitive, and world-record times often use just 2-look OLL and PLL. Executing algorithms is a very negligible part of the solve compared to the massive amounts of pair or block building.</p> Does full OLL/PLL/etc. exist for 4D puzzles? What about 4D algorithm explorers? <p>There's so many cases for each step of the solve that creating a complete algorithm set is basically impossible, and there's so many options for moves that algorithm explorers are infeasible. Almost every algorithm we have is based on an algorithm from 3D, and the only search program we have is a sort of optimizer for one very specific kind of algorithm derived from 3D.</p>"},{"location":"faq/#does-this-puzzle-exist","title":"Does this puzzle exist?","text":"4D Square-1 <p>Square-1 is fundamentally a bandaged dodecagonal prism. There are so many ways to extend that into 4D that there isn't really a canonical \"4D square-1\"</p> 4D Skewb <p>Again, there's lots of ways to generalize a skewb. If you just want cuts that look like a skewb, there's a few different puzzles that emulate that. If you want a half-cut vertex-turning hypercube, that's a thing too! It just doesn't \"look like\" a traditional skewb.</p> 8-dimensional and higher <p>There's just no point. After 5D, it's not difficult or interesting, just more tedious and computationally expensive.</p> 3D Rubik's Clock <p>Instead of rotating circles in 2D, you can rotate spheres in 3D. This is a more interesting puzzle than the traditional Rubik's Clock because moves don't commute. No one's written a program yet to simulate it but you totally could!</p>"},{"location":"history/","title":"History of Hypercubing","text":""},{"location":"history/#1988-2002-the-beginning-of-hypercubing","title":"1988-2002: The Beginning of Hypercubing","text":""},{"location":"history/#2002-2010-early-mailing-list-years","title":"2002-2010: Early Mailing List Years","text":""},{"location":"history/#2010-2017-andreys-influence","title":"2010-2017: Andrey's Influence","text":"<p>Andrey Astrelin was a Russian programmer that became known to the hypercubing community when he claimed to have programmed and solved a 34 before MC4D was created in 1988. He had no proof for this, but was able to program a new simulator in only 129 lines of code, which certified his legitimacy. Andrey's main legacy came in the form of creating many programs for the community, including Magic Puzzle Ultimate, Magic Cube 7D, Magic Simplex 5D, and Magic Hyperbolic Tile. These programs unlocked a massive amount of higher dimensional puzzles that were probably never seen or solved before, enriching the hypercubing community. Unfortunately Andrey passed away in 20171, but his contributions to the hypercubing community will never be forgotten.</p>"},{"location":"history/#2017-present-making-physical-4d-puzzles","title":"2017-Present: Making Physical 4D Puzzles","text":"<p>Throughout 2013 and 2014, Melinda Green got in contact with Oskar van Deventer to try and think of any possible mechanism for a physical 24. After failing to find a reasonable physical mechanism, they ended up going with only using magnets in order to stick the hypercubies together. In 2017 the first design was finalized, and Melinda began selling the puzzles by 3D printing the parts from Shapeways. The quality of the puzzle improved in 2022 when Melinda secured a deal with a company to mass produce the pieces via injection moulding.</p> <p>In late 2021, some speculation began as to if you could expand the physical 24 into a physical 2x2x2x3 hypercuboid. After Rowan learned that Grant had 3D printed his own physical 24, he challenged him to build a physical 2x2x2x3. Grant completed the challenge, and began designing and printing many more physical puzzles, all the way up to the physical 3x3x3x3. Many physical puzzle designs have still yet to be built...</p> <p>Physical puzzles page</p> <ul> <li>2013-2015: Brainstorming ideas to make the 2x2x2x2 in 3D space</li> <li>2017 Feb 08: First puzzle made with magnetic dice mechanism</li> <li>2017 Apr 26: 2nd 24 made using 3D printing from Shapeways</li> <li>2022 Feb 03: Grant finishes the 2x2x2x3</li> <li>2023 May: First brainstorming of floppyhypercubes</li> <li>2022 May 14: Grant finishes the 2x2x3x3</li> <li>2022 Jul 06: Grant finishes the 2x3x3x3</li> <li>2022 Jul 22: Grant finishes the 3x3x3x3</li> <li>2022 Aug: Markk designs a physical simplex</li> </ul>"},{"location":"history/#2022-present-the-hyperspeedsolving-revolution","title":"2022-Present: The Hyperspeedsolving Revolution","text":"<p>In late 2021 Hactar began working on the Hyperspeedcube program, which was a massive upgrade over older programs like MC4D. Features like piece filters and customizable keybinds were instrumental to lowering solving times. November 2022 saw the beginning of the race for the 34 world record. The record was traded almost exclusively by Grant and Hactar, smashing all the barriers from sub-10 minutes all the way down to sub-2! There were also a few smaller record races for bigger layered n4s.</p> <ul> <li>2022 Jan: HSC v0.1 includes 3^3 and 3^4, filtering by piece type (not color), and customizable keybinds.</li> <li>2022 Aug: HSC v0.8 adds modern piece filters. HSC v0.9 adds multiple keybind sets.</li> <li>2022 Nov 06: First 34 sub-10:00 by Hactar</li> <li>2022 Nov 18: First 34 sub-9:00 by Rowan</li> <li>2022 Nov 19: First 34 sub-8:00 by Hactar</li> <li>2022 Nov 22: First 34 sub-7:00 by Grant</li> <li>2022 Nov 23: First 34 sub-6:00 by Hactar</li> <li>2022 Nov 26: First 34 sub-5:00 by Hactar</li> <li>2022 Dec 07: First 34 sub-4:00 by Grant</li> <li>2022 Dec 22: First 34 sub-3:00 by Hactar</li> <li>2023 May 13: First 34 sub-2:00 by Hactar</li> </ul> <ol> <li> <p>Read Andrey's biography here \u21a9</p> </li> </ol>"},{"location":"notation/","title":"Notation","text":"<p>This is notation specifically for n4 virtual puzzles. Notation pages for other puzzles coming soon\u2122\ufe0f...</p>"},{"location":"notation/#cells","title":"Cells","text":"<p>Yellow cell rotating</p> <p> </p> <p>The sides of a 4D puzzle are called <code>cells</code>, each of which is a cubic grid of n3 stickers. Because each side is cubic, they can be rotated with cubic symmetry. A cube has 24 different possible orientations, meaning that each side of a 4D puzzle can be oriented in 24 different ways.</p> <p>The cells are notated: Right, Left, Up, Down, Front, Back, Outside, Inside.</p> <p>This means we to use the letters <code>R</code> <code>L</code> <code>U</code> <code>D</code> <code>F</code> <code>B</code> <code>O</code> <code>I</code>.</p> <p>For the slice layers, we use <code>M</code> <code>E</code> <code>S</code> <code>P</code>, where P is the slice parallel to I/O.</p>"},{"location":"notation/#pieces","title":"Pieces","text":"<p>Each piece of the puzzle can be labeled based on which cells it is on. The 3c piece that has stickers on the <code>I</code>nside, <code>R</code>ight, and <code>U</code>p cells would be called the <code>IUR</code> piece.</p>"},{"location":"notation/#moves","title":"Moves","text":"<p>The moves are notated based on which piece you click to do the turn in MC4D. The first letter determines the cell to click on. The second letter determines the sticker on the cell (usually a 2c piece) to click on. For example:</p> <ul> <li><code>RO'</code> means to left click the R cell sticker of the RO piece.</li> <li><code>IUR</code> means to right click the I sticker of the IUR piece.</li> <li><code>FRUI</code> means to right click the F sticker of the FRUI piece.</li> </ul> <p>For slice and wide moves, you write the numbers you hold down on the keyboard while clicking.</p> <ul> <li><code>{2}RO</code> means to hold 2 while doing an RO move (essentially an M move).</li> <li><code>{2-3}UO'</code> means to hold 2 and 3 while doing a UO' move.</li> <li><code>{2-4}IF</code> means to hold 2, 3, and 4</li> </ul>"},{"location":"notation/#rotations","title":"Rotations","text":"<p>4D rotations work by using the positive sides of each axis (Up, Right, Front, and Outside). You can generalize this to any dimension as long as you always define which side is positive relative to the others.</p> <ul> <li><code>yw</code>: bring y+ to w+ (rotate U to O)</li> </ul> <p>Note how we don't have to use ' prime symbols because wy is the inverse of yw. This makes it a really nice system because it only ever uses 2 letters. You can also use it on the 33: <code>xy</code> means move x+ to y+ (R to U [z rotation]).</p> <p>In reality though, it's easiest to just say use <code>x</code>, <code>y</code>, and <code>z</code> for rotations that don't change the cells on the W axis. For other ones you can just say <code>recenter (cell)</code>.</p>"},{"location":"notation/#turn-metrics","title":"Turn metrics","text":"<p>There are many different ways to count the number of moves. Listed below are the metrics used by HSC.</p> ATM <ul> <li>Consecutive twists of the same axis are combined, even with different layers.</li> <li>Whole-puzzle rotations are not counted.</li> </ul> ETM <ul> <li>Twists are counted as they are executed, including whole-puzzle rotations.</li> </ul> STM <ul> <li>Whole-puzzle rotations are not counted.</li> <li>Slice twists count as one move.</li> <li>Consecutive twists of the same axis and layers are combined.</li> </ul> BTM <ul> <li>Whole-puzzle rotations are not counted.</li> <li>Noncontiguous slice twists are split into contiguous slice twists.</li> <li>Consecutive twists of the same axis and layers are combined.</li> </ul> OBTM <ul> <li>Whole-puzzle rotations are not counted.</li> <li>Slice twists are split into contiguous outer-block twists.</li> <li>Consecutive twists of the same axis and layers are combined.</li> </ul> <p>All of these metrics (besides ETM) have their own Quarter Turn counterparts, where twists are broken up into 90\u00b0 twists. For example, a 180\u00b0 face twist takes two 90\u00b0 twists, while a 120\u00b0 edge twist takes three.</p>"},{"location":"progression/","title":"Progression","text":"<p>This is an outline of how to make your way through the world of hypercubing. Learning puzzles in the wrong order can often lead to confusion, or hindering your understanding in the long run.</p> <p>Hactar</p> <p>It's very difficult to understand what's really going on in a physical puzzle without first understanding virtual puzzles. We recommend starting with virtual 3^4 for the same reason that 3D cubers typically recommend starting with 3x3x3.</p>"},{"location":"progression/#nxnxnxns","title":"NxNxNxN's","text":"<p>First, make sure you have good knowledge of the 3x3x3 Rubik's Cube. At the very minimum, how to solve it using a beginner's method, but preferably a more advanced method like CFOP or Roux, and some knowledge of blockbuilding or pairing pieces intuitively.</p> <pre><code>flowchart LR\n    A[3x3x3]\n    B[3x3x3x3]\n    C[2x2x2x2]\n    D[4x4x4x4]\n    E[5x5x5x5+]\n    F[Physical 2x2x2x2]\n    G[Virtual Physical 3x3x3x3]\n    A --&gt; B\n    B --&gt; C\n    C --&gt; D\n    C --&gt; F\n    D --&gt; E\n    F --&gt; G</code></pre>"},{"location":"progression/#other-4d-puzzles","title":"Other 4D Puzzles","text":"<p>There are many types of 4D puzzles, not just the hypercubes. These include hypercuboids, duoprisms, reqular 4D polytopes, and more. These puzzles require much more knowledge than just the 3x3x3. You'll need to know how to solve 3D cuboids, and generally be able to figure out new puzzles using commutators.</p> <pre><code>flowchart LR\n    Hypercuboids --&gt; Duoprisms --&gt; Polytopes\n\n\n    subgraph Polytopes\n    direction LR\n    Q[5-cell]\n    R[16-cell]\n    S[24-cell]\n    T[120-cell]\n    U[600-cell]\n    end\n\n    subgraph Duoprisms\n    direction LR\n    Z[\"{5}x{4}\"]\n    Y[\"{5}x{3}\"]\n    X[\"{5}x{5}\"]\n    end\n\n    subgraph Hypercuboids\n    direction LR\n    D[3x3x3x1]\n    E[3x3x3x2]\n    F[2x2x2x3]\n    G[2x2x3x3]\n    end\n\n</code></pre>"},{"location":"progression/#non-euclidean-puzzles","title":"Non-Euclidean Puzzles","text":"<p>While most puzzles in MagicTile aren't 4D, they do share some similar concepts due to their strange geometries.</p> <pre><code>flowchart LR\n    A[Torus Rubik]\n    B[Klein Bottle Rubik]\n    C[Hyperbolic Rubik]\n    D[Other]\n    A --&gt; B --&gt; C --&gt; D</code></pre>"},{"location":"progression/#5d-puzzles","title":"5D+ puzzles","text":"<pre><code>flowchart TD\n\n    subgraph 5D\n    direction LR\n    A[4D NxNxNxN's]\n    B[\"3\u2075\"]\n    C[\"2\u2075\"]\n    D[\"4\u2075\"]\n    E[Other 4D]\n    F[5D simplex]\n    A --&gt; B --&gt; C --&gt; D\n    E --&gt; F\n    A --&gt; E\n    end\n    subgraph 6D\n    direction LR\n    G[\"3\u2076\"]\n    H[\"Other N\u2076\"]\n    G --&gt; H\n    end\n    subgraph 7D\n    direction LR\n    V[\"3\u2077\"]\n    Q[\"Other N\u2077\"]\n    V --&gt; Q\n    end\n    5D --&gt; 6D --&gt; 7D</code></pre>"},{"location":"tutorial/","title":"Tutorial","text":""},{"location":"tutorial/#what-is-a-dimension","title":"What is a dimension?","text":"<p>The dimensionality of an object or space is the number of coordinates needed to describe its position. First, think of a 1-dimensional number line. To describe a position on the number line, all you need is one set of numbers for the coordinate. In 2-dimensional space like a graph, you need 2 sets of numbers to represent a point, such as \\((3,4)\\). This continues on to higher dimensions, where you need more and more numbers in order to locate a point.</p> <p>Common Misconception</p> <p>The 4th dimension is NOT time. In a hypercubing context, higher dimensions refer to spatial dimensions, not temporal dimensions. Time is a different type of dimension because we can't move around in it in the same way we can for a spatial dimension.</p> <p>The reason why it's so difficult to comprehend higher dimensions is that we can't see them in the same way we can see the normal 3 dimensions. In fact, humans technically only see in 2D, it's just that having 2 eyes allows for parallax and depth perception. When we show 3D shapes on a 2D computer monitor, they are getting projected into 2 dimensions. There are many types of spatial projections, and different ways to view higher dimensions, which only further obfuscates the understanding.</p> <p> By NerdBoy1392 - Own work, CC BY-SA 3.0, link</p> <p>Further reading:</p> <ul> <li>Four-dimensional space</li> </ul>"},{"location":"tutorial/#how-do-we-make-4d-puzzles","title":"How do we make 4D puzzles?","text":"<p>Puzzles are (usually) based on physical geometric shapes, so you have to understand what 4D shapes there are. 4D shapes have sides, or cells, that take the form of 3D shapes, and enclose some amount of \"hypervolume\".</p> <p>Check out these resources for a deeper understanding:</p> <ul> <li>Perfect Shapes in Higher Dimensions - Numberphile</li> <li>Regular polytope</li> <li>Regular 4-polytope</li> </ul> <p>One of the most important 4D shapes to understand is the hypercube, as it's considered to be the main attraction of hypercubing.</p> <p></p> <p>A hypercube (also known as a tesseract, 8-cell, octachoron, or 4-cube) is a shape with 8 cubic sides. 3 sides meet at each edge, giving it the Schl\u00e4fli symbol {\\(4,3,3\\)}. Watch the animation below, as the tesseract unfolds itself into its 3-dimensional net.</p> <p></p>"},{"location":"tutorial/#making-puzzles-out-of-shapes","title":"Making puzzles out of shapes","text":"<p>To make twisty puzzles out of higher dimensional shapes, we define cutting planes and twist axes, which will tell us which pieces go where when the puzzle is turned. Cutting a hypercube into 3 layers along each axis, we get the 3x3x3x3, or 34.</p> <p></p> <p>Congratulations, you have completed the tutorial!</p>"},{"location":"videos/","title":"YouTube Videos &amp; Playlists","text":"<p>List of popular videos and playlists related to hypercubing.</p>"},{"location":"videos/#youtube-videos","title":"YouTube Videos","text":"<ul> <li>Demystifying the 4D Rubik's Cube</li> <li>Cracking the 4D Rubik's Cube with simple 3D tricks</li> <li>How to Solve a 4D Rubik's Cube | Beginner's Method Tutorial</li> <li>The Quest to Build a 4D Rubik's Cube</li> </ul>"},{"location":"videos/#youtube-playlists","title":"YouTube Playlists","text":"<ul> <li>Introduction to Hypercubing</li> <li>Melinda's 2x2x2x2 UWRs in order</li> <li>3x3x3x3 UWRs</li> <li>4D Twisty Puzzles</li> <li>Melinda's 2x2x2x2</li> <li>hypercubing videos</li> </ul>"},{"location":"leaderboards/history/","title":"World Record History","text":"Virtual n4Physical 4DOther 4DMagicTileMisc 2x2x2x23x3x3x34x4x4x45x5x5x56x6x6x67x7x7x7 SingleBlindfolded Name Time Date Program Grant Staten 28s 510ms 2023-05-24 HSC Grant Staten 31s 640ms 2023-05-23 HSC Grant Staten 33s 340ms 2023-05-20 HSC Grant Staten 34s 170ms 2023-05-20 HSC Grant Staten 34s 590ms 2023-05-16 HSC Grant Staten 34s 950ms 2023-05-11 HSC Grant Staten 36s 230ms 2023-03-08 HSC Adam Marcellus Kelly 39s 400ms 2023-01-16 HSC Adam Marcellus Kelly 43s 540ms 2023-01-16 HSC Grant Staten 44s 750ms 2023-01-02 HSC Grant Staten 48s 520ms 2023-01-01 HSC Grant Staten 49s 980ms 2023-01-01 HSC Grant Staten 50s 950ms 2022-12-21 HSC Tetrian 1m 00s 800ms 2021-07-24 MC4D Name Time Date Program TheGrayCuber 14m 41s 550ms 2019-10-12 MC4D SingleAo5Blindfolded Name Time Date Program Hactar 1m 56s 420ms 2023-05-13 HSC Grant Staten 2m 03s 830ms 2023-04-21 HSC Hactar 2m 07s 300ms 2023-04-08 HSC Grant Staten 2m 11s 330ms 2023-03-16 HSC Hactar 2m 17s 970ms 2023-03-11 HSC Grant Staten 2m 21s 010ms 2023-03-08 HSC Hactar 2m 26s 460ms 2023-02-18 HSC Hactar 2m 29s 730ms 2023-01-11 HSC Hactar 2m 39s 470ms 2023-01-08 HSC Hactar 2m 41s 220ms 2023-01-03 HSC Hactar 2m 42s 810ms 2022-12-30 HSC Grant Staten 2m 59s 340ms 2022-12-23 HSC Hactar 2m 59s 970ms 2022-12-22 HSC Grant Staten 3m 06s 060ms 2022-12-21 HSC Grant Staten 3m 13s 970ms 2022-12-21 HSC Grant Staten 3m 16s 440ms 2022-12-20 HSC Grant Staten 3m 21s 520ms 2022-12-15 HSC Grant Staten 3m 23s 260ms 2022-12-14 HSC Grant Staten 3m 34s 430ms 2022-12-14 HSC Grant Staten 3m 45s 690ms 2022-12-13 HSC Grant Staten 3m 55s 320ms 2022-12-10 HSC Grant Staten 3m 58s 290ms 2022-12-07 HSC Grant Staten 4m 02s 600ms 2022-12-03 HSC Grant Staten 4m 09s 190ms 2022-12-03 HSC Grant Staten 4m 10s 840ms 2022-12-02 HSC Hactar 4m 30s 880ms 2022-12-01 HSC Grant Staten 4m 43s 860ms 2022-11-30 HSC Hactar 4m 50s 730ms 2022-11-29 HSC Grant Staten 4m 52s 940ms 2022-11-27 HSC Hactar 4m 58s 140ms 2022-11-26 HSC Grant Staten 5m 01s 920ms 2022-11-26 HSC Grant Staten 5m 23s 820ms 2022-11-25 HSC Grant Staten 5m 25s 140ms 2022-11-25 HSC Hactar 5m 32s 980ms 2022-11-23 HSC Grant Staten 6m 36s 380ms 2022-11-23 HSC Hactar 6m 38s 920ms 2022-11-22 HSC Grant Staten 6m 46s 210ms 2022-11-22 HSC Hactar 7m 02s 170ms 2022-11-21 HSC Grant Staten 7m 36s 320ms 2022-11-21 HSC Hactar 7m 43s 330ms 2022-11-19 HSC Hactar 8m 02s 530ms 2022-11-19 HSC Hactar 8m 15s 350ms 2022-11-19 HSC Hactar 8m 23s 590ms 2022-11-18 HSC Rowan Fortier 8m 58s 820ms 2022-11-18 HSC Hactar 9m 05s 820ms 2022-11-06 HSC Tetrian 10m 11s 870ms 2019-05-04 MC4D Name Time Date Program Hactar 2m 18s 180ms 2023-05-12 HSC Hactar 2m 20s 190ms 2023-04-22 HSC Hactar 2m 26s 160ms 2023-04-22 HSC Grant Staten 2m 28s 050ms 2023-04-10 HSC Hactar 2m 33s 100ms 2023-04-08 HSC Hactar 2m 35s 290ms 2023-04-08 HSC Grant Staten 2m 35s 940ms 2023-03-10 HSC Hactar 2m 39s 640ms 2023-02-18 HSC Hactar 3m 02s 780ms 2022-12-31 HSC Grant Staten 3m 52s 000ms 2022-12-16 HSC Name Time Date Program Sebastian Yuste 1h 21m 17s 680ms 2022-03-17 MC4D Name Time Date Program Grant Staten 8m 40s 210ms 2023-06-20 HSC Grant Staten 8m 52s 970ms 2023-04-26 HSC Grant Staten 8m 55s 680ms 2023-04-25 HSC Grant Staten 9m 47s 420ms 2023-04-25 HSC Grant Staten 9m 50s 700ms 2023-02-23 HSC Grant Staten 10m 03s 550ms 2023-02-18 HSC Grant Staten 10m 33s 210ms 2023-02-16 HSC Grant Staten 10m 44s 230ms 2023-01-30 HSC Grant Staten 11m 13s 680ms 2023-01-29 HSC Grant Staten 11m 16s 710ms 2023-01-17 HSC Hactar 11m 22s 350ms 2023-01-13 HSC Hactar 11m 39s 600ms 2023-01-13 HSC Hactar 11m 42s 850ms 2023-01-13 HSC Hactar 12m 25s 220ms 2023-01-13 HSC Hactar 12m 28s 140ms 2023-01-13 HSC Grant Staten 12m 33s 750ms 2023-01-12 HSC Hactar 13m 13s 650ms 2023-01-12 HSC Grant Staten 13m 17s 780ms 2023-01-08 HSC Grant Staten 13m 21s 360ms 2023-01-06 HSC Grant Staten 14m 00s 760ms 2023-01-05 HSC Grant Staten 14m 10s 440ms 2023-01-05 HSC Hactar 14m 38s 910ms 2023-01-05 HSC Grant Staten 14m 39s 130ms 2023-01-04 HSC Grant Staten 15m 18s 840ms 2023-01-04 HSC Hactar 15m 28s 210ms 2023-01-04 HSC Grant Staten 15m 44s 920ms 2023-01-03 HSC Grant Staten 15m 59s 750ms 2023-01-03 HSC Hactar 17m 14s 760ms 2023-01-03 HSC Grant Staten 17m 21s 339ms 2022-12-31 HSC Grant Staten 18m 53s 840ms 2022-12-29 HSC Grant Staten 19m 17s 700ms 2022-12-28 HSC Grant Staten 19m 57s 080ms 2022-12-24 HSC Grant Staten 20m 18s 480ms 2022-12-23 HSC Grant Staten 21m 37s 070ms 2022-12-20 HSC Grant Staten 23m 50s 750ms 2022-12-17 HSC Luna Harran 29m 54s 820ms 2022-12-04 HSC Grant Staten 32m 46s 550ms 2022-12-04 HSC Luna Harran 44m 40s 420ms 2022-11-23 HSC Tetrian 1h 12m 07s 650ms 2019-05-19 MC4D Name Time Date Program Grant Staten 20m 48s 930ms 2023-07-22 HSC Grant Staten 21m 40s 870ms 2023-07-20 HSC Grant Staten 21m 44s 120ms 2023-06-02 HSC Grant Staten 22m 11s 780ms 2023-05-29 HSC Grant Staten 23m 19s 100ms 2023-05-27 HSC Grant Staten 23m 42s 580ms 2023-05-13 HSC Grant Staten 25m 11s 080ms 2023-05-06 HSC Grant Staten 27m 08s 970ms 2023-04-27 HSC Grant Staten 28m 14s 310ms 2023-03-17 HSC Grant Staten 28m 58s 950ms 2023-02-21 HSC Grant Staten 29m 58s 510ms 2023-02-01 HSC Grant Staten 31m 06s 980ms 2023-01-23 HSC Grant Staten 33m 47s 210ms 2023-01-20 HSC Grant Staten 34m 33s 540ms 2023-01-17 HSC Grant Staten 39m 03s 510ms 2023-01-12 HSC Grant Staten 41m 59s 320ms 2023-01-05 HSC Grant Staten 49m 52s 500ms 2023-01-04 HSC Hactar 55m 13s 040ms 2023-01-04 HSC Grant Staten 57m 43s 650ms 2022-12-30 HSC Luna Harran 1h 31m 38s 500ms 2022-12-07 HSC Name Time Date Program Grant Staten 56m 03s 940ms 2023-06-02 HSC Grant Staten 1h 00m 31s 150ms 2023-05-29 HSC Grant Staten 1h 03m 23s 500ms 2023-05-23 HSC Grant Staten 1h 04m 57s 880ms 2023-05-15 HSC Grant Staten 1h 12m 22s 580ms 2023-05-10 HSC Grant Staten 1h 19m 30s 890ms 2023-05-09 HSC Grant Staten 1h 23m 25s 520ms 2023-03-03 HSC Grant Staten 1h 29m 29s 900ms 2023-02-02 HSC Grant Staten 1h 38m 45s 280ms 2023-01-18 HSC Grant Staten 2h 16m 26s 540ms 2023-01-12 HSC Luna Harran 3h 15m 46s 110ms 2022-12-31 HSC Name Time Date Program Grant Staten 1h 58m 21s 230ms 2023-07-18 HSC Grant Staten 2h 11m 41s 970ms 2023-05-31 HSC Grant Staten 3h 27m 17s 510ms 2023-01-22 HSC Hactar 4h 39m 59s 940ms 2023-01-21 HSC Physical 2x2x2x2Virtual Physical 3x3x3x3 SingleOne HandedBlindfolded Name Time Date Grant Staten 54s 840ms 2022-11-08 Grant Staten 56s 650ms 2022-10-03 Grant Staten 1m 06s 040ms 2022-09-18 Grant Staten 1m 07s 570ms 2022-08-12 Grant Staten 1m 23s 280ms 2022-08-07 Rowan Fortier 1m 27s 170ms 2022-08-02 Rowan Fortier 1m 28s 140ms 2022-06-20 Rowan Fortier 1m 46s 240ms 2022-05-07 Rowan Fortier 1m 56s 750ms 2021-12-11 Rowan Fortier 2m 00s 660ms 2021-12-11 Rowan Fortier 2m 03s 580ms 2021-12-09 Rowan Fortier 2m 05s 270ms 2021-12-06 Rowan Fortier 2m 16s 540ms 2021-11-15 Connor Lindsay 2m 26s 000ms 2019-08-11 Name Time Date Grant Staten 3m 55s 620ms 2022-10-01 Rowan Fortier 6m 25s 120ms 2022-07-01 Name Time Date Asa Kaplan 47m 14s 000ms 2022-08-08 Name Time Date Program Grant Staten 9m 58s 950ms 2023-05-03 AKKEI-SIM Grant Staten 10m 30s 070ms 2023-04-20 AKKEI-SIM Grant Staten 10m 54s 210ms 2023-04-20 AKKEI-SIM Grant Staten 10m 58s 780ms 2023-04-18 AKKEI-SIM Grant Staten 11m 30s 660ms 2023-04-12 AKKEI-SIM Grant Staten 12m 05s 250ms 2023-04-09 AKKEI-SIM Grant Staten 14m 33s 060ms 2023-04-04 AKKEI-SIM Grant Staten 17m 11s 750ms 2023-03-29 AKKEI-SIM 3-Layer Simplex1x3x3x3 Name Time Date Program Grant Staten 1m 17s 700ms 2023-03-15 MC4D Rowan Fortier 1m 30s 460ms 2023-01-26 MC4D Tetrian 1m 43s 440ms 2021-07-24 MC4D Name Time Date Program Hactar 1m 00s 930ms 2023-05-31 MPU Luna Harran 1m 02s 910ms 2023-05-31 MPU Luna Harran 1m 24s 340ms 2023-05-31 MPU Grant Staten 1m 27s 390ms 2023-03-20 MPU Hemimegaminx Name Time Date Program Grant Staten 1m 51s 940ms 2023-03-19 MT Luna Harran 2m 06s 520ms 2023-03-18 MT Luna Harran 2m 11s 570ms 2023-03-18 MT Grant Staten 2m 19s 990ms 2023-03-18 MT Luna Harran 2m 54s 050ms 2023-03-18 MT Luna Harran 4m 30s 570ms 2023-03-18 MT 3x3x3 in 2D projection with 1D Vision Name Time Date Program Grant Staten 3m 22s 200ms 2023-07-05 HSC Grant Staten 4m 20s 209ms 2023-07-04 HSC Grant Staten 5m 10s 710ms 2023-07-04 HSC Grant Staten 6m 24s 390ms 2023-07-04 HSC Grant Staten 7m 34s 180ms 2023-07-03 HSC Markk 15m 45s 390ms 2022-12-02 HSC","boost":-3},{"location":"leaderboards/records/","title":"Current World Records","text":"Puzzle Name Time Date Program 2x2x2x2 Grant Staten 28s 510ms 2023-05-24 HSC 2x2x2x2 Blindfolded TheGrayCuber 14m 41s 550ms 2019-10-12 MC4D 3x3x3x3 Hactar 1m 56s 420ms 2023-05-13 HSC 3x3x3x3 Ao5 Hactar 2m 18s 180ms 2023-05-12 HSC 3x3x3x3 Blindfolded Sebastian Yuste 1h 21m 17s 680ms 2022-03-17 MC4D 4x4x4x4 Grant Staten 8m 40s 210ms 2023-06-20 HSC 5x5x5x5 Grant Staten 20m 48s 930ms 2023-07-22 HSC 6x6x6x6 Grant Staten 56m 03s 940ms 2023-06-02 HSC 7x7x7x7 Grant Staten 1h 58m 21s 230ms 2023-07-18 HSC Physical 2x2x2x2 Grant Staten 54s 840ms 2022-11-08 - Physical 2x2x2x2 One-Handed Grant Staten 3m 55s 620ms 2022-10-01 - Physical 2x2x2x2 Blindfolded Asa Kaplan 47m 14s 000ms 2022-08-08 - 3-Layer Simplex Grant Staten 1m 17s 700ms 2023-03-15 MC4D Hemimegaminx Grant Staten 1m 51s 940ms 2023-03-19 MT Virtual Physical 3x3x3x3 Grant Staten 9m 58s 950ms 2023-05-03 AKKEI-SIM 1x3x3x3 Hactar 1m 00s 930ms 2023-05-31 MPU 3x3x3 in 2D projection with 1D Vision Grant Staten 3m 22s 200ms 2023-07-05 HSC","boost":-1},{"location":"leaderboards/rules/","title":"Hypercubing Leaderboard Submission Rules","text":"<p>These rules are not written in legalese. Please don't try to exploit them. Ask in the Hypercubers Discord if you have any questions, comments, or concerns about these rules.</p> <p>These rules may be flexible, especially for new categories. For example, if you're speedsolving a really big puzzle that no one's done before, it might be reasonable to allow macros for it.</p>"},{"location":"leaderboards/rules/#general-rules","title":"General rules","text":"<ul> <li>These programs are recommended for speedsolving. If using a program not listed here, you should ask on the Discord first.</li> <li>The puzzle must be solved from a full scramble.</li> <li>Spectators may commentate, but must not help the solver.</li> <li>Algorithm reference sheets are strongly discouraged.1</li> <li>Using software to compute a solution to the puzzle state is not allowed (except for computer-assisted FMC).</li> <li>Reversing the scramble is not allowed; the solution must be novel.</li> </ul>"},{"location":"leaderboards/rules/#speedsolving-rules","title":"Speedsolving rules","text":"<p>These rules apply generally to speedsolving submissions unless the category has specific rules.</p> <ul> <li>Macros are not allowed.</li> <li>Piece filters are allowed.</li> <li>All speedsolves require video evidence, such as a screen recording.<ul> <li>A timer must be visible on the screen during the solve. Timers built into the puzzle software are preferred.</li> </ul> </li> <li>If using keyboard controls:<ul> <li>If possible, a keybinds reference must be visible during the solve.2</li> <li>The keybinds should not be hyperoptimized for specific algorithms.3</li> </ul> </li> <li>Log file is not required, but you should still save your PBs!</li> </ul>"},{"location":"leaderboards/rules/#blindsolving-rules","title":"Blindsolving rules","text":"<ul> <li>Macros are allowed during solving.</li> <li>Piece filters are allowed during memorization but not during solving.</li> <li>All blindsolves require video evidence of the solver that clearly shows the screen and that they are not cheating by using some external reference.</li> <li>The solver does not need to be blindfolded, but the colors on the puzzle must be invisible during the solve.</li> <li>Besides those rules, typical blindsolving rules apply:<ul> <li>Final time = memorization time + solving time.</li> <li>Writing anything down isn't allowed.</li> </ul> </li> </ul>"},{"location":"leaderboards/rules/#physical-rules","title":"Physical rules","text":"<p>Info</p> <p>See Canonical Moves for more details.</p> <ul> <li>All physical solves require physical evidence that shows the puzzle fully in frame throughout the solve and shows the entire scrambling and solving process as well as the timer.</li> <li>Allowed moves for physical 2x2x2x2 events are limited to 2 categories, the canonical moveset originally made by the hypercubing mailing list as well as a few additional moves:<ul> <li>Canonical moves:<ul> <li>All R and L cell rotations</li> <li>U/D y2</li> <li>F/B z2</li> <li>I/O x* (aka axial twist)</li> <li>Any of many equivalent gyro algorithms</li> </ul> </li> <li>Additional moves:<ul> <li>U/D x2/z2</li> <li>F/B x2/y2</li> <li>I y2/z2</li> </ul> </li> </ul> </li> <li>Scrambles should be generated by this page or any equivalent scramble generator.</li> <li>Any full puzzle rotation that doesn't change the state (including the Gyro) may be applied to the puzzle during inspection; other moves may not.</li> </ul>"},{"location":"leaderboards/rules/#fewest-moves-solving-rules","title":"Fewest-moves solving rules","text":"<ul> <li>Log files are required for submission.</li> <li>Video evidence is not required.</li> <li>Collaboration is allowed; each collaborator must be given the option to be credited for the solve, and should be credited if their contributions were significant.</li> </ul>"},{"location":"leaderboards/rules/#computer-assisted-fewest-moves-solving-rules","title":"Computer-assisted fewest-moves solving rules","text":"<ul> <li>Fewest-moves solving rules apply, except that using software to compute a partial or full solution is allowed.</li> </ul>"},{"location":"leaderboards/rules/#principles-when-writing-new-speedsolving-software","title":"Principles when writing new speedsolving software","text":"<p>If you're thinking of writing a new program for speedsolving or suggesting a new feature for Hyperspeedcube, here are some principles we try to follow:</p> <ul> <li>No more than one move per keypress.</li> <li>If your program has keybinds (especially customizable ones), add some reference that shows what keys are being pressed and what they're doing.</li> <li>New features should hopefully make solving strategy more interesting. Some examples:<ul> <li>Macros on the 34 encourage commutator spam, which is very boring compared to layer-by-layer or F2L methods, so they are not allowed for speedsolves.</li> <li>Piece filters reduce time spent looking for pieces, which is boring to do and boring to watch. There's a trade-off there: piece filters encourage a stricter solving order, which is less interesting in a way, but this also enables 3-Block, a very interesting method.</li> </ul> </li> <li>New features should ideally have some justification based on 3D speedsolving. For example, multiple keybind sets is analogous to different grips on a 3D puzzle.4</li> </ul> <ol> <li> <p>We can't stop you from using an algorithm reference, but it's not in the spirit of the competition and it'll probably slow you down.\u00a0\u21a9</p> </li> <li> <p>If the program doesn't have a built-in keybinds reference (such as akkei's physical 34 simulator) then you probably don't need one.\u00a0\u21a9</p> </li> <li> <p>In particular, you should not be able to execute a meaningful algorithm by pressing a sequence of keys in a line on the keyboard. Keybinds should be laid out in a way that makes sense moreso than a way that is useful for an algorithm. A keybind set optimized for general RKT is fine. If you have a question about this, ask on the Discord.\u00a0\u21a9</p> </li> <li> <p>You might hold a 33 differently to execute <code>&lt;M,U&gt;</code> moves more efficiently compared to <code>&lt;R,U,F&gt;</code> moves. Similarly, a 4D creature might have a specialized grip on the 34 for RKT compared to general moves.\u00a0\u21a9</p> </li> </ol>"},{"location":"leaderboards/solvers/adam/","title":"Adam Marcellus Kelly","text":"","boost":1},{"location":"leaderboards/solvers/adam/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 2x2x2x2  2 39s 400ms 2023-01-16 HSC 3x3x3x3  3 3m 49s 300ms 2023-01-12 HSC","boost":1},{"location":"leaderboards/solvers/adam/#history","title":"History","text":"Virtual n4 2x2x2x23x3x3x3 Single Rank Time Date Program  2 39s 400ms 2023-01-16 HSC 43s 540ms 2023-01-16 HSC Single Rank Time Date Program  3 3m 49s 300ms 2023-01-12 HSC 4m 34s 620ms 2023-01-10 HSC 5m 44s 860ms 2023-01-09 HSC 6m 58s 670ms 2023-01-09 HSC","boost":1},{"location":"leaderboards/solvers/alvin/","title":"Alvin","text":"","boost":1},{"location":"leaderboards/solvers/alvin/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 3x3x3x3 9 12m 13s 260ms 2022-11-24 HSC","boost":1},{"location":"leaderboards/solvers/alvin/#history","title":"History","text":"Virtual n4 3x3x3x3 Single Rank Time Date Program 9 12m 13s 260ms 2022-11-24 HSC","boost":1},{"location":"leaderboards/solvers/asa/","title":"Asa Kaplan","text":"","boost":1},{"location":"leaderboards/solvers/asa/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program Physical 2x2x2x2 Blindfolded  1 47m 14s 000ms 2022-08-08 -","boost":1},{"location":"leaderboards/solvers/asa/#history","title":"History","text":"Physical 4D Physical 2x2x2x2 Blindfolded Rank Time Date  1 47m 14s 000ms 2022-08-08","boost":1},{"location":"leaderboards/solvers/connor/","title":"Connor Lindsay","text":"","boost":1},{"location":"leaderboards/solvers/connor/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program Physical 2x2x2x2 6 2m 26s 000ms 2019-08-11 -","boost":1},{"location":"leaderboards/solvers/connor/#history","title":"History","text":"Physical 4D Physical 2x2x2x2 Single Rank Time Date 6 2m 26s 000ms 2019-08-11","boost":1},{"location":"leaderboards/solvers/cubedude/","title":"The Cube Dude","text":"","boost":1},{"location":"leaderboards/solvers/cubedude/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program Physical 2x2x2x2 4 1m 42s 400ms 2023-03-30 -","boost":1},{"location":"leaderboards/solvers/cubedude/#history","title":"History","text":"Physical 4D Physical 2x2x2x2 Single Rank Time Date 4 1m 42s 400ms 2023-03-30","boost":1},{"location":"leaderboards/solvers/grant/","title":"Grant Staten","text":"","boost":1},{"location":"leaderboards/solvers/grant/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 2x2x2x2  1 28s 510ms 2023-05-24 HSC 3x3x3x3  2 2m 03s 830ms 2023-04-21 HSC 3x3x3x3 Ao5  2 2m 28s 050ms 2023-04-10 HSC 4x4x4x4  1 8m 40s 210ms 2023-06-20 HSC 5x5x5x5  1 20m 48s 930ms 2023-07-22 HSC 6x6x6x6  1 56m 03s 940ms 2023-06-02 HSC 7x7x7x7  1 1h 58m 21s 230ms 2023-07-18 HSC Physical 2x2x2x2  1 54s 840ms 2022-11-08 - Physical 2x2x2x2 One-Handed  1 3m 55s 620ms 2022-10-01 - 3-Layer Simplex  1 1m 17s 700ms 2023-03-15 MC4D Hemimegaminx  1 1m 51s 940ms 2023-03-19 MT Virtual Physical 3x3x3x3  1 9m 58s 950ms 2023-05-03 AKKEI-SIM 1x3x3x3 4 1m 27s 390ms 2023-03-20 MPU 3x3x3 in 2D projection with 1D Vision  1 3m 22s 200ms 2023-07-05 HSC","boost":1},{"location":"leaderboards/solvers/grant/#history","title":"History","text":"Virtual n4Physical 4DOther 4DMagicTileMisc 2x2x2x23x3x3x34x4x4x45x5x5x56x6x6x67x7x7x7 Single Rank Time Date Program  1 28s 510ms 2023-05-24 HSC 31s 640ms 2023-05-23 HSC 33s 340ms 2023-05-20 HSC 34s 170ms 2023-05-20 HSC 34s 590ms 2023-05-16 HSC 34s 950ms 2023-05-11 HSC 36s 230ms 2023-03-08 HSC 44s 750ms 2023-01-02 HSC 48s 520ms 2023-01-01 HSC 49s 980ms 2023-01-01 HSC 50s 950ms 2022-12-21 HSC SingleAo5 Rank Time Date Program  2 2m 03s 830ms 2023-04-21 HSC 2m 11s 330ms 2023-03-16 HSC 2m 21s 010ms 2023-03-08 HSC 2m 30s 680ms 2023-02-25 HSC 2m 37s 880ms 2023-02-25 HSC 2m 41s 260ms 2023-02-24 HSC 2m 59s 340ms 2022-12-23 HSC 3m 06s 060ms 2022-12-21 HSC 3m 13s 970ms 2022-12-21 HSC 3m 16s 440ms 2022-12-20 HSC 3m 21s 520ms 2022-12-15 HSC 3m 23s 260ms 2022-12-14 HSC 3m 34s 430ms 2022-12-14 HSC 3m 45s 690ms 2022-12-13 HSC 3m 55s 320ms 2022-12-10 HSC 3m 58s 290ms 2022-12-07 HSC 4m 02s 600ms 2022-12-03 HSC 4m 09s 190ms 2022-12-03 HSC 4m 10s 840ms 2022-12-02 HSC 4m 43s 860ms 2022-11-30 HSC 4m 52s 940ms 2022-11-27 HSC 5m 01s 920ms 2022-11-26 HSC 5m 23s 820ms 2022-11-25 HSC 5m 25s 140ms 2022-11-25 HSC 6m 36s 380ms 2022-11-23 HSC 6m 46s 210ms 2022-11-22 HSC 7m 36s 320ms 2022-11-21 HSC Rank Time Date Program  2 2m 28s 050ms 2023-04-10 HSC 2m 35s 940ms 2023-03-10 HSC 3m 01s 410ms 2023-02-24 HSC 3m 52s 000ms 2022-12-16 HSC Rank Time Date Program  1 8m 40s 210ms 2023-06-20 HSC 8m 52s 970ms 2023-04-26 HSC 8m 55s 680ms 2023-04-25 HSC 9m 47s 420ms 2023-04-25 HSC 9m 50s 700ms 2023-02-23 HSC 10m 03s 550ms 2023-02-18 HSC 10m 33s 210ms 2023-02-16 HSC 10m 44s 230ms 2023-01-30 HSC 11m 13s 680ms 2023-01-29 HSC 11m 16s 710ms 2023-01-17 HSC 11m 44s 560ms 2023-01-14 HSC 11m 54s 530ms 2023-01-14 HSC 12m 33s 750ms 2023-01-12 HSC 13m 17s 780ms 2023-01-08 HSC 13m 21s 360ms 2023-01-06 HSC 14m 00s 760ms 2023-01-05 HSC 14m 10s 440ms 2023-01-05 HSC 14m 39s 130ms 2023-01-05 HSC 14m 39s 130ms 2023-01-04 HSC 15m 18s 840ms 2023-01-04 HSC 15m 44s 920ms 2023-01-03 HSC 15m 59s 750ms 2023-01-03 HSC 17m 21s 339ms 2022-12-31 HSC 18m 53s 840ms 2022-12-29 HSC 19m 17s 700ms 2022-12-28 HSC 19m 57s 080ms 2022-12-24 HSC 20m 18s 480ms 2022-12-23 HSC 20m 18s 480ms 2022-12-23 HSC 21m 37s 070ms 2022-12-20 HSC 23m 50s 750ms 2022-12-17 HSC 32m 46s 550ms 2022-12-04 HSC Rank Time Date Program  1 20m 48s 930ms 2023-07-22 HSC 21m 40s 870ms 2023-07-20 HSC 21m 44s 120ms 2023-06-02 HSC 22m 11s 780ms 2023-05-29 HSC 23m 19s 100ms 2023-05-27 HSC 23m 42s 580ms 2023-05-13 HSC 25m 11s 080ms 2023-05-06 HSC 27m 08s 970ms 2023-04-27 HSC 28m 14s 310ms 2023-03-17 HSC 28m 58s 950ms 2023-02-21 HSC 29m 58s 510ms 2023-02-01 HSC 31m 06s 980ms 2023-01-23 HSC 33m 47s 210ms 2023-01-20 HSC 34m 33s 540ms 2023-01-17 HSC 39m 03s 510ms 2023-01-12 HSC 41m 59s 320ms 2023-01-05 HSC 49m 52s 500ms 2023-01-04 HSC 57m 43s 650ms 2022-12-30 HSC Rank Time Date Program  1 56m 03s 940ms 2023-06-02 HSC 1h 00m 31s 150ms 2023-05-29 HSC 1h 03m 23s 500ms 2023-05-23 HSC 1h 04m 57s 880ms 2023-05-15 HSC 1h 12m 22s 580ms 2023-05-10 HSC 1h 19m 30s 890ms 2023-05-09 HSC 1h 23m 25s 520ms 2023-03-03 HSC 1h 29m 29s 900ms 2023-02-02 HSC 1h 38m 45s 280ms 2023-01-18 HSC 2h 16m 26s 540ms 2023-01-12 HSC Rank Time Date Program  1 1h 58m 21s 230ms 2023-07-18 HSC 2h 11m 41s 970ms 2023-05-31 HSC 3h 27m 17s 510ms 2023-01-22 HSC Physical 2x2x2x2Virtual Physical 3x3x3x3 SingleOne Handed Rank Time Date  1 54s 840ms 2022-11-08 56s 650ms 2022-10-03 1m 06s 040ms 2022-09-18 1m 07s 570ms 2022-08-12 1m 23s 280ms 2022-08-07 Rank Time Date  1 3m 55s 620ms 2022-10-01 Rank Time Date Program  1 9m 58s 950ms 2023-05-03 AKKEI-SIM 10m 30s 070ms 2023-04-20 AKKEI-SIM 10m 54s 210ms 2023-04-20 AKKEI-SIM 10m 58s 780ms 2023-04-18 AKKEI-SIM 11m 30s 660ms 2023-04-12 AKKEI-SIM 12m 05s 250ms 2023-04-09 AKKEI-SIM 14m 33s 060ms 2023-04-04 AKKEI-SIM 17m 11s 750ms 2023-03-29 AKKEI-SIM 3-Layer Simplex1x3x3x3 Rank Time Date Program  1 1m 17s 700ms 2023-03-15 MC4D 1m 31s 110ms 2023-03-15 MC4D 1m 34s 160ms 2023-03-15 MC4D 1m 43s 190ms 2023-03-15 MC4D 1m 48s 760ms 2023-03-14 MC4D 2m 16s 370ms 2023-03-14 MC4D 2m 36s 420ms 2023-03-10 MC4D 3m 29s 740ms 2023-03-09 MC4D 6m 11s 010ms 2023-01-24 MC4D 8m 15s 420ms 2023-01-19 MC4D Rank Time Date Program 4 1m 27s 390ms 2023-03-20 MPU Hemimegaminx Rank Time Date Program  1 1m 51s 940ms 2023-03-19 MT 2m 19s 990ms 2023-03-18 MT 3m 35s 860ms 2023-03-18 MT 3x3x3 in 2D projection with 1D Vision Rank Time Date Program  1 3m 22s 200ms 2023-07-05 HSC 4m 20s 209ms 2023-07-04 HSC 5m 10s 710ms 2023-07-04 HSC 6m 24s 390ms 2023-07-04 HSC 7m 34s 180ms 2023-07-03 HSC","boost":1},{"location":"leaderboards/solvers/gray/","title":"TheGrayCuber","text":"","boost":1},{"location":"leaderboards/solvers/gray/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 2x2x2x2 Blindfolded  1 14m 41s 550ms 2019-10-12 MC4D","boost":1},{"location":"leaderboards/solvers/gray/#history","title":"History","text":"Virtual n4 2x2x2x2 Blindfolded Rank Time Date Program  1 14m 41s 550ms 2019-10-12 MC4D","boost":1},{"location":"leaderboards/solvers/hactar/","title":"Hactar","text":"","boost":1},{"location":"leaderboards/solvers/hactar/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 3x3x3x3  1 1m 56s 420ms 2023-05-13 HSC 3x3x3x3 Ao5  1 2m 18s 180ms 2023-05-12 HSC 4x4x4x4  2 11m 22s 350ms 2023-01-13 HSC 5x5x5x5  2 40m 04s 760ms 2023-01-18 HSC 7x7x7x7  2 4h 39m 59s 940ms 2023-01-21 HSC 1x3x3x3  1 1m 00s 930ms 2023-05-31 MPU","boost":1},{"location":"leaderboards/solvers/hactar/#history","title":"History","text":"Virtual n4Other 4D 3x3x3x34x4x4x45x5x5x57x7x7x7 SingleAo5 Rank Time Date Program  1 1m 56s 420ms 2023-05-13 HSC 2m 05s 300ms 2023-04-22 HSC 2m 07s 300ms 2023-04-08 HSC 2m 17s 970ms 2023-03-11 HSC 2m 26s 460ms 2023-02-18 HSC 2m 29s 730ms 2023-01-11 HSC 2m 39s 470ms 2023-01-08 HSC 2m 41s 220ms 2023-01-03 HSC 2m 42s 810ms 2022-12-30 HSC 2m 59s 970ms 2022-12-22 HSC 4m 30s 880ms 2022-12-01 HSC 4m 50s 730ms 2022-11-29 HSC 4m 58s 140ms 2022-11-26 HSC 5m 32s 980ms 2022-11-23 HSC 6m 38s 920ms 2022-11-22 HSC 7m 02s 170ms 2022-11-21 HSC 7m 43s 330ms 2022-11-19 HSC 8m 02s 530ms 2022-11-19 HSC 8m 15s 350ms 2022-11-19 HSC 8m 23s 590ms 2022-11-18 HSC 9m 05s 820ms 2022-11-06 HSC Rank Time Date Program  1 2m 18s 180ms 2023-05-12 HSC 2m 20s 190ms 2023-04-22 HSC 2m 26s 160ms 2023-04-22 HSC 2m 33s 100ms 2023-04-08 HSC 2m 35s 290ms 2023-04-08 HSC 2m 39s 640ms 2023-02-18 HSC 3m 02s 780ms 2022-12-31 HSC Rank Time Date Program  2 11m 22s 350ms 2023-01-13 HSC 11m 39s 600ms 2023-01-13 HSC 11m 42s 850ms 2023-01-13 HSC 12m 25s 220ms 2023-01-13 HSC 12m 28s 140ms 2023-01-13 HSC 13m 13s 650ms 2023-01-12 HSC 13m 34s 550ms 2023-01-12 HSC 13m 58s 650ms 2023-01-08 HSC 14m 38s 910ms 2023-01-05 HSC 15m 28s 210ms 2023-01-04 HSC 16m 47s 070ms 2023-01-04 HSC 17m 14s 760ms 2023-01-03 HSC 23m 26s 720ms 2023-01-01 HSC Rank Time Date Program  2 40m 04s 760ms 2023-01-18 HSC 43m 15s 780ms 2023-01-13 HSC 44m 25s 040ms 2023-01-12 HSC 55m 13s 040ms 2023-01-04 HSC 1h 04m 03s 180ms 2023-01-03 HSC Rank Time Date Program  2 4h 39m 59s 940ms 2023-01-21 HSC 1x3x3x3 Rank Time Date Program  1 1m 00s 930ms 2023-05-31 MPU","boost":1},{"location":"leaderboards/solvers/hyperespy/","title":"Hyperespy","text":"","boost":1},{"location":"leaderboards/solvers/hyperespy/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program Physical 2x2x2x2 5 2m 11s 470ms 2022-11-15 - Virtual Physical 3x3x3x3  2 44m 41s 490ms 2023-04-12 AKKEI-SIM","boost":1},{"location":"leaderboards/solvers/hyperespy/#history","title":"History","text":"Physical 4D Physical 2x2x2x2Virtual Physical 3x3x3x3 Single Rank Time Date 5 2m 11s 470ms 2022-11-15 Rank Time Date Program  2 44m 41s 490ms 2023-04-12 AKKEI-SIM 47m 43s 810ms 2023-04-04 AKKEI-SIM","boost":1},{"location":"leaderboards/solvers/kevin/","title":"K3v1N","text":"","boost":1},{"location":"leaderboards/solvers/kevin/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program Virtual Physical 3x3x3x3  3 55m 06s 000ms 2023-05-05 AKKEI-SIM","boost":1},{"location":"leaderboards/solvers/kevin/#history","title":"History","text":"Physical 4D Virtual Physical 3x3x3x3 Rank Time Date Program  3 55m 06s 000ms 2023-05-05 AKKEI-SIM","boost":1},{"location":"leaderboards/solvers/koen/","title":"Koen R.","text":"","boost":1},{"location":"leaderboards/solvers/koen/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 3x3x3x3 11 22m 25s 490ms 2023-01-09 HSC","boost":1},{"location":"leaderboards/solvers/koen/#history","title":"History","text":"Virtual n4 3x3x3x3 Single Rank Time Date Program 11 22m 25s 490ms 2023-01-09 HSC","boost":1},{"location":"leaderboards/solvers/luna/","title":"Luna Harran","text":"","boost":1},{"location":"leaderboards/solvers/luna/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 3x3x3x3 5 5m 48s 730ms 2023-01-06 HSC 4x4x4x4  3 29m 54s 820ms 2022-12-04 HSC 5x5x5x5  3 1h 31m 38s 500ms 2022-12-07 HSC 6x6x6x6  2 3h 15m 46s 110ms 2022-12-31 HSC Hemimegaminx  2 2m 06s 520ms 2023-03-18 MT 1x3x3x3  2 1m 02s 910ms 2023-05-31 MPU","boost":1},{"location":"leaderboards/solvers/luna/#history","title":"History","text":"Virtual n4Other 4DMagicTile 3x3x3x34x4x4x45x5x5x56x6x6x6 Single Rank Time Date Program 5 5m 48s 730ms 2023-01-06 HSC Rank Time Date Program  3 29m 54s 820ms 2022-12-04 HSC 44m 40s 420ms 2022-11-23 HSC Rank Time Date Program  3 1h 31m 38s 500ms 2022-12-07 HSC Rank Time Date Program  2 3h 15m 46s 110ms 2022-12-31 HSC 1x3x3x3 Rank Time Date Program  2 1m 02s 910ms 2023-05-31 MPU 1m 24s 340ms 2023-05-31 MPU Hemimegaminx Rank Time Date Program  2 2m 06s 520ms 2023-03-18 MT 2m 11s 570ms 2023-03-18 MT 2m 54s 050ms 2023-03-18 MT 4m 30s 570ms 2023-03-18 MT","boost":1},{"location":"leaderboards/solvers/markk/","title":"Markk","text":"","boost":1},{"location":"leaderboards/solvers/markk/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 3x3x3 in 2D projection with 1D Vision  2 15m 45s 390ms 2022-12-02 HSC","boost":1},{"location":"leaderboards/solvers/markk/#history","title":"History","text":"Misc 3x3x3 in 2D projection with 1D Vision Rank Time Date Program  2 15m 45s 390ms 2022-12-02 HSC","boost":1},{"location":"leaderboards/solvers/olaf/","title":"Olaf Niechcial","text":"","boost":1},{"location":"leaderboards/solvers/olaf/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 3x3x3x3 6 7m 55s 600ms 2023-06-12 HSC","boost":1},{"location":"leaderboards/solvers/olaf/#history","title":"History","text":"Virtual n4 3x3x3x3 Single Rank Time Date Program 6 7m 55s 600ms 2023-06-12 HSC 8m 38s 360ms 2023-06-11 HSC 9m 44s 250ms 2023-06-10 HSC 10m 33s 560ms 2023-06-09 HSC 11m 10s 750ms 2023-06-08 HSC 13m 56s 310ms 2023-06-07 HSC 17m 46s 640ms 2023-06-06 HSC 20m 13s 860ms 2023-06-06 HSC","boost":1},{"location":"leaderboards/solvers/origamist/","title":"Normal Origamist","text":"","boost":1},{"location":"leaderboards/solvers/origamist/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program Physical 2x2x2x2  3 1m 40s 300ms 2023-07-08 -","boost":1},{"location":"leaderboards/solvers/origamist/#history","title":"History","text":"Physical 4D Physical 2x2x2x2 Single Rank Time Date  3 1m 40s 300ms 2023-07-08","boost":1},{"location":"leaderboards/solvers/rowan/","title":"Rowan Fortier","text":"","boost":1},{"location":"leaderboards/solvers/rowan/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 3x3x3x3 4 4m 07s 830ms 2023-07-13 HSC Physical 2x2x2x2  2 1m 18s 240ms 2022-09-17 - Physical 2x2x2x2 One-Handed  2 5m 35s 290ms 2023-03-12 - 3-Layer Simplex  2 1m 30s 460ms 2023-01-26 MC4D 1x3x3x3  3 1m 15s 580ms 2023-05-31 MPU","boost":1},{"location":"leaderboards/solvers/rowan/#history","title":"History","text":"Virtual n4Physical 4DOther 4D 3x3x3x3 Single Rank Time Date Program 4 4m 07s 830ms 2023-07-13 HSC 4m 10s 390ms 2023-07-06 HSC 4m 12s 920ms 2023-02-21 HSC 4m 20s 019ms 2023-01-12 HSC 4m 27s 700ms 2023-01-12 HSC 4m 38s 750ms 2023-01-12 HSC 4m 42s 190ms 2023-01-11 HSC 4m 50s 970ms 2023-01-09 HSC 4m 55s 270ms 2023-01-09 HSC 5m 02s 290ms 2023-01-06 HSC 5m 21s 880ms 2023-01-06 HSC 5m 27s 170ms 2023-01-05 HSC 5m 45s 180ms 2023-01-05 HSC 5m 48s 120ms 2023-01-05 HSC 5m 51s 330ms 2023-01-05 HSC 5m 58s 300ms 2023-01-04 HSC 6m 25s 040ms 2023-01-04 HSC 6m 31s 020ms 2022-12-01 HSC 8m 58s 820ms 2022-11-18 HSC Physical 2x2x2x2 SingleOne Handed Rank Time Date  2 1m 18s 240ms 2022-09-17 1m 27s 170ms 2022-08-02 1m 28s 140ms 2022-06-20 1m 46s 240ms 2022-05-07 1m 56s 750ms 2021-12-11 2m 00s 660ms 2021-12-11 2m 03s 580ms 2021-12-09 2m 05s 270ms 2021-12-06 2m 16s 540ms 2021-11-15 Rank Time Date  2 5m 35s 290ms 2023-03-12 6m 14s 880ms 2023-03-12 6m 25s 120ms 2022-07-01 3-Layer Simplex1x3x3x3 Rank Time Date Program  2 1m 30s 460ms 2023-01-26 MC4D 1m 43s 450ms 2023-01-25 MC4D 2m 14s 040ms 2023-01-23 MC4D Rank Time Date Program  3 1m 15s 580ms 2023-05-31 MPU","boost":1},{"location":"leaderboards/solvers/tetrian/","title":"Tetrian","text":"","boost":1},{"location":"leaderboards/solvers/tetrian/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 2x2x2x2  3 1m 00s 800ms 2021-07-24 MC4D 3x3x3x3 8 10m 11s 870ms 2019-05-04 MC4D 4x4x4x4 4 1h 12m 07s 650ms 2019-05-19 MC4D 3-Layer Simplex  3 1m 43s 440ms 2021-07-24 MC4D","boost":1},{"location":"leaderboards/solvers/tetrian/#history","title":"History","text":"Virtual n4Other 4D 2x2x2x23x3x3x34x4x4x4 Single Rank Time Date Program  3 1m 00s 800ms 2021-07-24 MC4D Single Rank Time Date Program 8 10m 11s 870ms 2019-05-04 MC4D Rank Time Date Program 4 1h 12m 07s 650ms 2019-05-19 MC4D 3-Layer Simplex Rank Time Date Program  3 1m 43s 440ms 2021-07-24 MC4D","boost":1},{"location":"leaderboards/solvers/tymofro/","title":"Tymon Fro","text":"","boost":1},{"location":"leaderboards/solvers/tymofro/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 3x3x3x3 7 9m 08s 770ms 2023-07-22 HSC","boost":1},{"location":"leaderboards/solvers/tymofro/#history","title":"History","text":"Virtual n4 3x3x3x3 Single Rank Time Date Program 7 9m 08s 770ms 2023-07-22 HSC 10m 41s 570ms 2023-07-22 HSC 12m 48s 460ms 2023-07-21 HSC 15m 22s 620ms 2023-07-17 HSC","boost":1},{"location":"leaderboards/solvers/void/","title":"The Void","text":"","boost":1},{"location":"leaderboards/solvers/void/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 3x3x3x3 10 17m 19s 920ms 2023-06-28 HSC","boost":1},{"location":"leaderboards/solvers/void/#history","title":"History","text":"Virtual n4 3x3x3x3 Single Rank Time Date Program 10 17m 19s 920ms 2023-06-28 HSC 20m 12s 920ms 2023-06-11 HSC","boost":1},{"location":"leaderboards/solvers/weill/","title":"Weill","text":"","boost":1},{"location":"leaderboards/solvers/weill/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 3x3x3x3 12 24m 46s 950ms 2022-12-02 HSC","boost":1},{"location":"leaderboards/solvers/weill/#history","title":"History","text":"Virtual n4 3x3x3x3 Single Rank Time Date Program 12 24m 46s 950ms 2022-12-02 HSC","boost":1},{"location":"leaderboards/solvers/yuste/","title":"Sebastian Yuste","text":"","boost":1},{"location":"leaderboards/solvers/yuste/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 3x3x3x3 Blindfolded  1 1h 21m 17s 680ms 2022-03-17 MC4D","boost":1},{"location":"leaderboards/solvers/yuste/#history","title":"History","text":"Virtual n4 3x3x3x3 Blindfolded Rank Time Date Program  1 1h 21m 17s 680ms 2022-03-17 MC4D","boost":1},{"location":"leaderboards/templates/history/","title":"World Record History","text":"","boost":-3},{"location":"leaderboards/templates/records/","title":"Current World Records","text":"","boost":-1},{"location":"methods/","title":"Methods","text":"<p>This page lists solving methods by puzzle.</p> <p>It's a good idea to learn Notation before trying to learn any of these methods</p>"},{"location":"methods/#physical-2x2x2x2","title":"Physical 2x2x2x2","text":"<p>While you can use virtual 24 methods on the physical 24, it isn't recommended because you may have to use an excessive amount of gyros. These methods are specifically designed for the unique restrictive turning of the physical 24 in mind.</p> <ul> <li>Luna's Method</li> <li>Rowan's Method</li> <li>Grant's OBC Method</li> <li>P4L (PBLBC)</li> <li>GRCL Method</li> </ul>"},{"location":"methods/#2x2x2x2","title":"2x2x2x2","text":"<ul> <li>4Tega</li> <li>Cell By Cell</li> </ul>"},{"location":"methods/#3x3x3x3","title":"3x3x3x3","text":"<ul> <li>CFOP</li> <li>3-Block</li> <li>Octachoroux</li> </ul>"},{"location":"methods/#4x4x4x4","title":"4x4x4x4+","text":"<ul> <li>Reduction</li> <li>3Block</li> </ul>"},{"location":"methods/big-cube-reduction/","title":"Big Cube Reduction","text":"<p>Not to be confused with Dimensional Reduction</p> <p>Just like 3D reduction of big cubes, 4D reduction works by pairing up successive groups of pieces with more and more colors. For example if you were reducing 46 to 36, you would pair in the order 1c, 2c, 3c, 4c, and then 5c.</p>"},{"location":"methods/2x2x2x2/4tega/","title":"4tega","text":"<p>4tega is the 4-dimensional equivalent of the Ortega Method on 23. There are 2 main variants, as there is no perfect way to generalize this method to 4d.</p>"},{"location":"methods/2x2x2x2/4tega/#variant-1","title":"Variant 1","text":""},{"location":"methods/2x2x2x2/4tega/#orient-both-cells","title":"Orient Both Cells","text":"<p>Start by orienting a single side, using either colour from that side or its opposite side. This can easily be done without RKT by using blockbuilding. Next, use 24 OLC strategies to orient the other cell. Because the first cell isn't solved, you don't have to worry about messing it up, allowing you to save moves.</p>"},{"location":"methods/2x2x2x2/4tega/#separate-colors","title":"Separate colors","text":"<p>Separate the colors of the cells that are oriented, leaving you with 2 23 solves.</p>"},{"location":"methods/2x2x2x2/4tega/#permute-both-cells","title":"Permute Both Cells","text":"<p>Solve the first cell like a 23 without RKT, then solve the other cell like a 23, but using RKT.</p>"},{"location":"methods/2x2x2x2/4tega/#variant-2","title":"Variant 2","text":""},{"location":"methods/2x2x2x2/4tega/#orient-both-cells_1","title":"Orient Both Cells","text":"<p>Same as in Variant 1.</p>"},{"location":"methods/2x2x2x2/4tega/#separate-colors_1","title":"Separate colors","text":"<p>Same as in Variant 1.</p>"},{"location":"methods/2x2x2x2/4tega/#orient-both-layers-of-both-cells","title":"Orient Both Layers of Both Cells","text":"<p>Use RKT to orient both layers of both cells, just like OBL in 3D Ortega. This can be done using the OCLL algorithms.</p>"},{"location":"methods/2x2x2x2/4tega/#p4lpblbc","title":"P4L/PBLBC","text":"<p>Permtue all 4 layers of both cells at once using algorithms. Some algorithms can be found here.</p>"},{"location":"methods/2x2x2x2/cell-by-cell/","title":"Cell by Cell","text":"<p>Cell by Cell is the 4D equivalent of Layer by Layer.</p>"},{"location":"methods/2x2x2x2/cell-by-cell/#steps","title":"Steps","text":""},{"location":"methods/2x2x2x2/cell-by-cell/#1-solve-the-first-cell","title":"1. Solve the first cell","text":"<p>Completely solve one of the sides of the puzzle. You can do this by blockbuilding, or by getting all the same color one on side and then using RKT to permute the pieces around until they are solved.</p>"},{"location":"methods/2x2x2x2/cell-by-cell/#2-solve-the-last-cell","title":"2. Solve the last cell","text":""},{"location":"methods/2x2x2x2/cell-by-cell/#a-orient-the-last-cell","title":"a. Orient the last cell","text":"<p>Orient the last cell by using RKT to set up OCLL cases, and then using RKT to perform those algorithms.</p>"},{"location":"methods/2x2x2x2/cell-by-cell/#b-permute-the-last-cell","title":"b. Permute the last cell","text":"<p>Permute the last cell like a 23 using RKT. You may run into RKT parity in this step, or you can avoid it by using certain last layer algorithms.</p>"},{"location":"methods/2x2x2x2-physical/grant/","title":"Grant's OBC Method for physical 2x2x2x2","text":"<p>Grant's OBC Method uses only 3 gyros, making it much faster than Rowan's OBC Method. It works by secretly setting up to an H OCLL case while orienting both cells.</p>"},{"location":"methods/2x2x2x2-physical/grant/#steps","title":"Steps","text":""},{"location":"methods/2x2x2x2-physical/grant/#inspection","title":"Inspection","text":"<p>Before starting the solve, inspect the puzzle for an opposite colour pair that you can easily get exactly 8 stickers from that pair to be on the y-axis. They can be in any spot, as long as they are pointing up or down.</p> <p> <p> Exactly 8 4c oriented to y-axis  </p>"},{"location":"methods/2x2x2x2-physical/grant/#getting-8-oriented-to-y-axis-then-gyro","title":"Getting 8 Oriented to Y-axis, then gyro","text":"<p>This is done in just a few simple moves, and should be fully planned during inspection for speedsolving. This step is very difficult to get used to, but gets easier over time. Once it looks like the image above, perform the gyro algorithm such that those 8 stickers end up on the x-axis (the \"pipped\" spots).</p>"},{"location":"methods/2x2x2x2-physical/grant/#orient-the-remaining-8-to-y-axis","title":"Orient the remaining 8 to y-axis","text":"<p>Now that 8 corners have been oriented, you can do any moves (besides a gyro), and not affect their orientation. Pair up the remaining 8 so that they are all on the same cell, and oriented to the y-axis.</p> <p> <p> One cell oriented on x-axis, the other on y-axis  </p>"},{"location":"methods/2x2x2x2-physical/grant/#finish-orientation","title":"Finish orientation","text":"<p>Rotate the cell with the pieces you just paired up to the w-axis (facing in/out). Now perform the gyro algorithm, and cancel into the 5 move H OCLL case, and then gyro again.</p>"},{"location":"methods/2x2x2x2-physical/grcl/","title":"GRCL Method","text":"<p>The Grant Rowan Connor Luna method, or GRCL (pronounced gurkle) is a combination of the best parts of several methods, including Grant's OBC method, Rowan's OBC method, Luna's cell blockbuilding technique, Connor Lindsay's P4L algorithms. The name GRCL was proposed by Hypercubers Discord member Jasper on July 18 2022.</p>"},{"location":"methods/2x2x2x2-physical/grcl/#steps","title":"Steps","text":"<ul> <li>Orient Both Cells using either Grant's method or Rowan's method (whatever looks better in that particular scramble)</li> <li>Separate the pipped colours of both cells while orienting 2 layers on those cells by holding the puzzle vertically and using Luna's method</li> <li>Permuate both layers of both cell using Rowan's updated version of connor's P4L algorithms</li> </ul>"},{"location":"methods/2x2x2x2-physical/luna/","title":"Luna's Method for 2x2x2x2","text":"<p>(work in progress)</p>"},{"location":"methods/2x2x2x2-physical/p4l/","title":"P4L","text":""},{"location":"methods/2x2x2x2-physical/p4l/#history","title":"History","text":"<p>PBLBC/P4L/PAL is an advanced algorithm set for speedsolving Melinda\u2019s Physical 2x2x2x2. It is used after orientation and separation of 2 opposite cells, followed by (or simultaneously) orienting both layers on both of those cells. This leaves you with two 2x2x2 PBL cases, one on each cell. The original idea for this came from Connor Lindsay, who created most of the algorithms in his algorithm sheet.</p> <p>2 years later, Rowan tried optimizing the algorithms, and compiling them in a new document, which can be found here.</p>"},{"location":"methods/2x2x2x2-physical/p4l/#algorithms","title":"Algorithms","text":"<p>Each layer can be in 3 different permutations: solved, adjacent swap, and opposite swap. This gives us 81 cases, but some of these are impossible. Cases can also be rearranged via Case Manipulation, further reducing the number of cases to 29. Practically however, only a few algorithms are used because all the bad cases are really slow to execute.</p>"},{"location":"methods/2x2x2x2-physical/p4l/#big-3d-cases","title":"Big 3D Cases","text":"<p>Big 3D cases are the cases where you have 2 pairs of the same layers, such as OOAA. In such a case, you can just use the normal 23 PBL algorithm for that case (but it must be a version with the moveset <code>&lt;R2,L2,F2,B2,U*,D*&gt;</code> only, due to the restrictions in turning the puzzle).</p>"},{"location":"methods/2x2x2x2-physical/rowan/","title":"Rowan's OBC Method for 2x2x2x2","text":"<p>Rowan developed this method for Orienting Both Cells while trying to solve the physical 2x2x2x2 for the first time in a YouTube video.</p>"},{"location":"methods/2x2x2x2-physical/rowan/#steps","title":"Steps","text":""},{"location":"methods/2x2x2x2-physical/rowan/#inspection","title":"Inspection","text":"<p>Before starting the solve, inspect the puzzle for an opposite colour pair that has 4 or fewer stickers oriented to the Left/Right axis (x-axis). They can be made of any colour in the colour pair, and can be in any spot on the puzzle.</p> <p> <p> 4 red/orange corners oriented to L/R  </p>"},{"location":"methods/2x2x2x2-physical/rowan/#getting-8-oriented-to-y-axis","title":"Getting 8 Oriented to Y-axis","text":"<p>Hold the puzzle vertically, and use block building to orient 8 pieces on a cell to the y-axis using the same colour pair that has 4 or less from inspection. This step is intuitive and does not require any RKT.</p> <p> <p> 8 red/orange corners oriented to U/D  </p>"},{"location":"methods/2x2x2x2-physical/rowan/#getting-12-oriented-to-y-axis","title":"Getting 12 Oriented to Y-axis","text":"<p>Now use RKT to orient a layer of 4 stickers on the other cell, leaving you with a \"last layer\" of 4 unoriented pieces on one of the cells.</p> <p> <p> 12 red/orange corners oriented to U/D  </p>"},{"location":"methods/2x2x2x2-physical/rowan/#fixing-the-last-layer","title":"Fixing the Last Layer","text":"<p>Gyro the puzzle such that the 12 pieces that were oriented end up on the x-axis. Now you should have 4 (or fewer) stickers from that colour pair oriented in other directions besides the x-axis. All you need to do is use RKT to make it into a layer that looks like a possible OCLL case, not worrying about messing up the other 12 corners.</p> <p> <p> an H OCLL case set up on LU  </p> <p>From here, gyro back. Now you will have a normal OCLL case that you can solve using RKT. After doing that algorithm, you should have all 16 corners oriented to the y-axis. Finally, you just gyro to put them all on the x-axis, and OBC is solved.</p>"},{"location":"methods/2x2x2x2-physical/rowan/#analysis","title":"Analysis","text":"<p>This technique takes more moves than other known OBC methods, and it uses up to 4 gyros. Besides the skip case where everything is already oriented, the best possible case for this technique uses 3 gyros, making it slower than other techniques. It also requires knowing the OCLL algorithms, which other techniques don't.</p>"},{"location":"methods/3x3x3x3/3block/","title":"3-Block","text":"<p>3-Block is a method designed for quickly speedsolving the 34. Many speedsolving world records have been set using this method. It was primarily invented by Luna and HactarCE, and has been described as \"ZZ without EO\". 3-Block is most analogous to the 33 method FreeFOP (which omits a single cross piece in order to pair pieces easier).</p> <p>Prerequisites</p> <ul> <li>Knowledge of how the 4D puzzle moves</li> <li>Notation</li> <li>RKT</li> <li>3D CFOP with 2-look OLL &amp; PLL</li> </ul> HSC Piece filters Pink crossRowan's filters (white cross) <pre><code>- preset_name: 4-cross\nvisible_pieces: 000200080a5010284280\n- preset_name: Mid (back)\nvisible_pieces: 000200084a5090294284\n- preset_name: Mid\nvisible_pieces: 000200094a5294294294\n- preset_name: Left (cross)\nvisible_pieces: 000200094a5294296294\n- preset_name: Left\nvisible_pieces: 0002000d4a5a943962d4\n- preset_name: BL-a\nvisible_pieces: 0002000d4a7a943963d4\n- preset_name: BL\nvisible_pieces: 0002000d6a7ad4b963d6\n- preset_name: FL-a\nvisible_pieces: 0002000d6b7ad4bd63d6\n- preset_name: FL\nvisible_pieces: 0002008d6b7bd6bd6bd6\n- preset_name: Right (cross)\nvisible_pieces: 0002008d6b7bd6bdebd6\n- preset_name: Right\nvisible_pieces: 0002008d7b7bf6fdebd7\n- preset_name: BR-a\nvisible_pieces: 0002008d7bfbf6fdefd7\n- preset_name: BR\nvisible_pieces: 0002008dfbfbf7ffefdf\n- preset_name: FR-a\nvisible_pieces: 0002008dfffbf7ffffdf\n- preset_name: FR\nvisible_pieces: 0002008fffffffffffff\n- preset_name: OLC 2c\nvisible_pieces: \"01471400000000000000\"\n- preset_name: OLC 3c\nvisible_pieces: aaa8aa20000000000000\n- preset_name: OLC 4c\nvisible_pieces: \"54104150000000000000\"\n- preset_name: OLC\nvisible_pieces: ffffff70000000000000\n- preset_name: PLC 2c\nvisible_pieces: 014714080a5010004000\n- preset_name: PLC cross\nvisible_pieces: \"01479e20000000000000\"\n- preset_name: PLC F2L\nvisible_pieces: 01efff70000000000000\n- preset_name: PLC\nvisible_pieces: ffffff70000000000000\n- preset_name: End\nvisible_pieces: ffffffffffffffffffff\n</code></pre> <pre><code>- preset_name: 4/6Cross\nvisible_pieces: 000204080a5830004080\n- preset_name: Middle 1\nvisible_pieces: 00070e080a5830004080\n- preset_name: Middle 2\nvisible_pieces: 00070e080a583000e0c1\n- preset_name: Left Block 1\nvisible_pieces: 00478e080a5a3008e0d1\n- preset_name: Left Block 2\nvisible_pieces: 00478e080e5e3008e0d1\n- preset_name: Left Block 3\nvisible_pieces: 00c78f080e5e3008e0d1\n- preset_name: Left Block 4\nvisible_pieces: 00c78f080e5e3008f0f1\n- preset_name: Left Block 5\nvisible_pieces: 00c78f080f5f3008f0f1\n- preset_name: Left Block 6\nvisible_pieces: 00e7cf080f5f3008f0f1\n- preset_name: Left Block 7\nvisible_pieces: 00e7cf080f5f300cf8f1\n- preset_name: Right Block 1\nvisible_pieces: 00e7df280f5fb00cfaf5\n- preset_name: Right Block 2\nvisible_pieces: 00e7df280fdfb10cfaf5\n- preset_name: Right Block 3\nvisible_pieces: 00e7ff680fdfb10cfaf5\n- preset_name: Right Block 4\nvisible_pieces: 00e7ff680fdfb10cfefd\n- preset_name: Right Block 5\nvisible_pieces: 00e7ff680ffff10cfefd\n- preset_name: Right Block 6\nvisible_pieces: 00efff780ffff10cfefd\n- preset_name: Right Block 7\nvisible_pieces: 00efff780ffff10cffff\n- preset_name: 2c OLC\nvisible_pieces: 01efff7d5ffff12cffff\n- preset_name: 3c OLC\nvisible_pieces: abeffffffffff57dffff\n- preset_name: 4c OLC\nvisible_pieces: 54ffff700ffffb8effff\n- preset_name: 2c PLC\nvisible_pieces: 01efff7d5ffff12cffff\n- preset_name: RKT PLC Cross\nvisible_pieces: ab00000d500000204000\n- preset_name: RKT PLC F2L\nvisible_pieces: ff10008ff00000204000\n- preset_name: RKT PLC LL\nvisible_pieces: ff10008ff0000ef30000\n</code></pre>"},{"location":"methods/3x3x3x3/3block/#summary","title":"Summary","text":"<ol> <li><code>4-Cross</code> \u2014 Solve 4 out of the 6 cross pieces.</li> <li><code>Mid</code> \u2014 Solve 4 2c3c pairs betwen the 4 cross pieces.</li> <li><code>Left</code> \u2014 Blockbuild or pair pieces to solve the Left Cell.</li> <li><code>Right</code> \u2014 Blockbuild or pair pieces to solve the Right Cell.</li> </ol>"},{"location":"methods/3x3x3x3/3block/#steps","title":"Steps","text":""},{"location":"methods/3x3x3x3/3block/#4-cross","title":"4-Cross","text":"<p>Solve the four 2c cross pieces in a ring in the M slice. Leave the L and R cross pieces unsolved.</p> <p></p>"},{"location":"methods/3x3x3x3/3block/#mid","title":"Mid","text":"<p>Tip</p> <p>For the entirety of F2L, the last layer is held on the I cell, as opposed to CFOP where it is held on the U cell. This allows us to see more information at once.</p> <p>Create and insert 4 F2L-a (2c3c) pairs into the 4/6 cross. This will solve 2/3 of the M slice. Because the Left and Right cells don't have their cross pieces, you can use them to aid with building and inserting the pairs.</p> <p></p>"},{"location":"methods/3x3x3x3/3block/#left","title":"Left","text":"<p>Solve the Left cell. This is done in 3 blocks, hence the name of the method. The first block consists of the cross edge, followed by two 2c3c F2L-a pairs that are opposite of each other. This solves the middle column of the left cell. The final two blocks consist of a 2c3c pair, and two 3c4c pairs.</p> <p></p>"},{"location":"methods/3x3x3x3/3block/#right","title":"Right","text":"<p>Solve the Right cell. This is also done by breaking it up into the 3 blocks, except now you don't have an empty opposite cell to aid you in making pairs. You could just solve the cross edge, and then finish the whole solve using CFOP style F2L and Last Cell. You can also do it the 3 blocks way, except having less freedom means that it is slightly trickier to set up the correct cases.</p> <p></p>"},{"location":"methods/3x3x3x3/3block/#last-cell","title":"Last Cell","text":"<p>This is done in the exact same way as CFOP.</p>"},{"location":"methods/3x3x3x3/3block/#big-cubes","title":"Big cubes","text":"<p>Solve all the centers, then pair up only the pieces you need during the step of 3-block you're on. For example: after solving centers, pair up 4 cross ridges. For last cell, you can either just orient everything, and then do an RKT 44 solve, or you can pair everything and end up with an RKT 33 solve.</p>"},{"location":"methods/3x3x3x3/cfop/","title":"CFOP","text":"<p>3D CFOP can be easily implemented on the 4D Rubik's Cube. This method was also called Sheerin-Zhao Method (Hybrid) V1, named after the people who discovered its higher dimensional equivalence.</p> <p>Prerequisites</p> <ul> <li>Knowledge of how the 4D puzzle moves</li> <li>Notation</li> <li>RKT</li> <li>3D CFOP with 2-look OLL &amp; PLL</li> </ul>"},{"location":"methods/3x3x3x3/cfop/#summary","title":"Summary","text":"<ol> <li>Cross \u2014 Build a cross by solving six 2c pieces on the O or D cell</li> <li>F2L-a \u2014 Join 2c+3c pairs together and insert them into the first two layers</li> <li>F2L-b \u2014 Join 3c+4c pairs together and insert them into the first two layers</li> <li>OLC \u2014 Orient LC 2c, 3c, and 4c pieces using 3D EOLL and OCLL</li> <li>PLC \u2014 Permute LC 2c pieces of the LL using EPLL, then solve 3c and 4c like a 3^3 using RKT</li> </ol>"},{"location":"methods/3x3x3x3/cfop/#steps","title":"Steps","text":""},{"location":"methods/3x3x3x3/cfop/#cross","title":"Cross","text":"<p>Using the same techniques from 3D, intuitively place the cross 2c pieces such that they lie between their centers, correctly oriented. After this step, the cross should be kept on the D layer.</p>"},{"location":"methods/3x3x3x3/cfop/#f2l-a","title":"F2L-a","text":"<p>Find a pair of 2C and 3C pieces. Find a way to bring them onto the P slice using easy intuitve setups. Now, you should be able to pair them up using \"normal\" looking 3x3x3 moves.</p> <p>Repeat this until you have solved all 12 2c3c pairs of F2L-a.</p> <p>Misoriented pairs</p> <p>It is possible to insert a pair into its slot, but rotated in place. Make sure to line it up so that it looks like a normal 3x3x3 case before inserting the pair. Oftentimes, this just means doing a Ux2 or Uz2 move beforehand.</p>"},{"location":"methods/3x3x3x3/cfop/#f2l-b","title":"F2L-b","text":"<p>Find any 3C piece that doesn't have a U cell colour. Find its respective 4C piece.</p> <ul> <li>If they both have the same coloured sticker on the U cell, use RKT on the U cell to pair them up.</li> <li>If the 4C is stuck in a slot in the D cell, bring the edge over the slot such that its colour on the I cell matches the 4C's colour on the I cell. Then use RKT to pair them up.</li> <li>If the 3C is stuck in a slot in the middle layer, bring the 4C on top of it until its colour on the I cell matches the 3C's colour on the I cell. Then use RKT to pair them up.</li> <li>If none of the above cases occured, then you kind of just have to fiddle around with it or pick a different pair to solve.</li> </ul> <p>Repeat for all 8 3c4c pairs of F2L-b.</p>"},{"location":"methods/3x3x3x3/cfop/#olc","title":"OLC","text":""},{"location":"methods/3x3x3x3/cfop/#2c-olc","title":"2c OLC","text":"<p>Use EOLL algorithms from 2-look OLL to orient the 2C pieces. This can always be done in 2 EOLL algorithms (or less).</p>"},{"location":"methods/3x3x3x3/cfop/#3c-olc","title":"3c OLC","text":"<p>Use RKT to set up the slice layers of the Last Cell into configurations that look like possible OCLL cases. Then use the OCLL algorithms to solve that case. This can always be done in 3 OCLL algorithms (or less)</p> <p>3c monotwist</p> <p>It's possible to have just 1 3c piece twisted in place. To avoid this, make sure that your last OCLL algorithm will solve all of the 3c pieces. For example if you have 5 left, you can't set it up into an H OCLL case, because that will solve 4/5, leaving you with 1 left. Instead, you can set it up into a Sune case, which would then leave you with 2 (which you can solve using a T or U case OCLL algorithm).</p>"},{"location":"methods/3x3x3x3/cfop/#4c-olc","title":"4c OLC","text":"<p>Use RKT on the Last Cell to set up the 4c pieces into possible OCLL cases. Rotate the Last Cell to U, such that your OCLL case is in the IU plane, then execute that algorithm with RKT.</p> <p>4c monoflip</p> <p>It's possible to have just 1 4c piece flipped in place. To avoid this, make sure that your last OCLL algorithm will solve all of the 4c pieces. For example if you have 5 left, you can't set it up into an H OCLL case, because that will solve 4/5, leaving you with 1 left. Instead, you can set it up into a Sune case, which would then leave you with 2 (which you can solve using a T or U case OCLL algorithm).</p>"},{"location":"methods/3x3x3x3/cfop/#plc","title":"PLC","text":""},{"location":"methods/3x3x3x3/cfop/#2c-plc","title":"2c PLC","text":"<p>Match as many 2c pieces as possible (ideally, you get 2 solved that are opposite of each other). Then use EPLL algorithms to permute the rest of them. If you don't have 2 that are opposite of each other, you can do an initial U perm to solve 2 opposite.</p> <p>There are also fancy new 3-cycle algorithms for a 4D \"adjacent U-perms\" in both directions. (Cycles the 2cs around a corner)</p>"},{"location":"methods/3x3x3x3/cfop/#rkt-plc","title":"RKT PLC","text":"<p>From here, you use RKT to solve the rest of the puzzle like a whole 3^3. The CFOP method is recommended for this because you arrive at this step inspectionless, meaning that in a speedsolve, you don't really have the time to count Edge Orientation, or plan a First Block. Finding 4 cross pieces is pretty easy inspectionless.</p> <p>RKT parity</p> <p>If the \"top face\" of the LL is 180 degrees off from the rest of the puzzle, you have to use a special 4D algorithm to correct this. See RKT for algorithms.</p> <p>RKT parity avoidance</p> <p>You can avoid RKT parity every single time by using 2-look PLL (if you solve RKTPLC using CFOP [2-look CMLL if you solve with Roux]). When you get to PLL, correct any RKT debt you have. Then put the solved LL corner in the UIFR spot. Now you can do whichever A-perm you have (clockwise or anticlockwise). Finally, you can use an EPLL alg without worrying about whether you'll get RKT parity or not.</p>"},{"location":"methods/3x3x3x3/octachoroux/","title":"Octachoroux","text":"<p>Octachoroux</p> <ul> <li><code>Algorithms:</code> 3D Roux + RKT Parity</li> <li><code>Move count:</code> way too many</li> </ul> <p>This method is Rowan Fortier's attempt to bring the Roux method to the 3x3x3x3.</p>"},{"location":"methods/3x3x3x3/octachoroux/#summary","title":"Summary","text":"<ol> <li><code>1st Block</code> \u2014 Solve a 1x2x3x3 block using blockbuilding techniques.</li> <li><code>2nd Block</code> \u2014 Solve a 1x2x3x3 block on the other side of the puzzle.</li> <li><code>CMLC</code> \u2014 Orient and permute the corners of the U cell.</li> <li><code>L/R</code> \u2014 Solve the Left and Right cells.</li> <li><code>M slice</code> - Permute the M slice.</li> </ol>"},{"location":"methods/3x3x3x3/octachoroux/#steps","title":"Steps","text":""},{"location":"methods/3x3x3x3/octachoroux/#1st-block","title":"1st Block","text":"<p>Start with the \"cross piece\" of the 1st block. Then build four 2c3c and four 3c4c pairs around it, to complete the 1x2x3x3 block. No RKT is needed for this, as none of the other pieces have been solved yet.</p>"},{"location":"methods/3x3x3x3/octachoroux/#2nd-block","title":"2nd Block","text":"<p>Use the free M slice to help you build the pairs to make the 2nd 1x2x3x3 block on the opposite side of the puzzle from the 1st block.</p>"},{"location":"methods/3x3x3x3/octachoroux/#cmlc","title":"CMLC","text":"<p>Use the same strategies from CFOP, but only for the 4C pieces. This step feels like solving the last cell of a 24, except you have to use 34 algorithms so that you don't mess up other pieces.</p>"},{"location":"methods/3x3x3x3/octachoroux/#lr","title":"L/R","text":"<p>Insert the UR and UL 2c pieces using setup moves and EPLL algorithms. Now set up the 3c pieces that need to go to L/R into the IDF spot with the L/R colour on the I cell and the U colour on the D cell. Then move the spot where that L/R edge needs to go above that edge and insert that piece using the RKT algorithm of M D2 M' D2 (2RO' IF' RO2 IF 2RO IF' RO2 IF). Repeat this for all of the edges (pretty tedious).</p>"},{"location":"methods/3x3x3x3/octachoroux/#m-slice","title":"M slice","text":"<p>Now all that's left to be solve is the M slice of the puzzle. Notice how the M slice is more like a 33 than the PLC of CFOP. The centers are already permuted too! However, this step is much more painful than normal RKT PLC due to the strange parities that can happen.</p> <p>tricky situations</p> <ul> <li>A 3c piece can look \"mirrored\" in place.</li> <li>A single 3c piece can be rotated wrong.</li> </ul>"},{"location":"puzzles/","title":"Puzzles","text":"<p>This page lists many different higher dimensional twisty puzzles.</p>"},{"location":"puzzles/#hypercubes","title":"Hypercubes","text":"<ul> <li>2x2x2x2</li> <li>3x3x3x3</li> <li>4x4x4x4</li> <li>5x5x5x5</li> <li>6x6x6x6</li> <li>7x7x7x7</li> </ul>"},{"location":"puzzles/#physical-puzzles","title":"Physical Puzzles","text":"<p>Very few 4D puzzles have physical implementations, the major exception to this being the 2x2x2x2 through 3x3x3x3 hypercuboids. See Physical puzzles for information on the currently existing and theoretical physical puzzles.</p>"},{"location":"puzzles/#hypercuboids","title":"Hypercuboids","text":""},{"location":"puzzles/#duoprisms","title":"Duoprisms","text":""},{"location":"puzzles/2x2x2x2/","title":"2x2x2x2","text":"<p>2x2x2x2</p> <p> Shape: Tesseract</p> <p>Pieces: 16 4c</p> <p>Permutations: \\(3.3*10^{27}\\)</p>"},{"location":"puzzles/2x2x2x2/#history","title":"History","text":"<p>The 2x2x2x2 (normally referred to as the 24) is a 4-dimensional twisty puzzle in the shape of a hypercube that is cut in half on each of the 4 axes.</p> <p>The first official 24 solve on the Hall of Fame was done by Jay Berkenbilt in 2004 using MC4D, although it was probably solved several times before that.</p>"},{"location":"puzzles/2x2x2x2/#physical-version","title":"Physical version","text":"<p>Since 2013, Melinda Green has been refining her physical 2x2x2x2. See her project home page for more details.</p>"},{"location":"puzzles/2x2x2x2/#see-also","title":"See also","text":"<ul> <li>Leaderboard section for 2x2x2x2</li> </ul>"},{"location":"puzzles/3x3x3x3/","title":"3x3x3x3","text":"<p>3x3x3x3</p> <p> Shape: Tesseract</p> <p>Pieces: 8 1c, 24 2c, 32 3c, 16 4c</p> <p>Permutations: \\(1.7*10^{120}\\)</p> <p>The 3x3x3x3 (normally referred to as the 34) is a 4-dimensional twisty puzzle in the shape of a hypercube that has 2 cuts along each of the 4 axes. It is a direct higher dimensional analogy of the 3x3x3 Rubik's Cube.</p> <p>The 34 is recommended as one's first introduction to solving higher dimensional puzzles.</p>"},{"location":"puzzles/3x3x3x3/#pieces","title":"Pieces","text":"<p>The 34 has 81 hypercubies, of which 72 are movable. It has 8 1c, 24 2c, 32 3c, and 16 4c pieces. The 3c pieces can be rotated in 6 different ways, and the 4c pieces in 12 different ways.</p>"},{"location":"puzzles/3x3x3x3/#turning","title":"Turning","text":"<p>Each turn of the 34 is a rotation of one of its cubic cells (which can be oriented in any of 24 orientations of a cube). A normal move disturbs 8 4c, 12 3c, and 4 2c pieces.  </p>"},{"location":"puzzles/3x3x3x3/#history","title":"History","text":"<p>The 34 has always been the main focus of the community. The first solve was done by Don Hatch in ~1988 using MC4D. After that, the Hall of Fame gradually began to increase in size. It eventually closed on December 7th, 2022 due to it reaching 500 solvers.</p>"},{"location":"puzzles/3x3x3x3/#speedsolving","title":"Speedsolving","text":"<p>(See the leaderboards for the current records)</p> <p>There were a few hypercube speedsolving competitions during the early days of hypercubing, with the controversy at the time being if they were to allow macros or not. One of the first competitions happened in 2010, with the fastest time being 15:57 by Mateusz Burnicki (using prepared macros) Some contestants recieved a t-shirt with an image of the 34 in MC4D on it.</p> <p>In mid 2017, The speedsolving scene was single handedly revived by Tetrian22, lowering his best from 37:07 to 10:11 in just under 10 months.</p> <p>Starting in November 2022, a 34 speedsolving frenzy began due to the popularity of the recently created Hyperspeedcube program, and its keyboard controls. The record bounced between Hactar and Grant as it smashed through all the barriers, finally lowering to sub-2 minutes in May 2023.</p>"},{"location":"puzzles/physical/","title":"Physical Puzzles","text":"<p>Warning</p> <p>It is highly recommended to learn how virtual puzzles work first before trying to understand the physical puzzles.</p> <p>Physical 3x3x3x3</p> <p> Rendered by Grant</p> <p>Physical puzzles refer to higher dimensional puzzles that are physically built in real life (using only 3 dimensions). This often involves clever designs, strange symmetry-abusing tricks, and lots and lots of magnets. Often, these puzzles are too impractical to use, defeating their sole purpose.</p> <p>For a documentary about the history of physical puzzles as of December 2022, see Rowan's video.</p>"},{"location":"puzzles/physical/#physical-puzzles-that-have-been-built","title":"Physical puzzles that have been built","text":"<ul> <li>Melinda's 2x2x2x2</li> <li>Grant's 2x2x2x3</li> <li>Grant's 2x2x3x3</li> <li>Grant's 2x3x3x3</li> <li>Grant's 1x1x1x1</li> <li>Grant's 3x3x3x3</li> </ul>"},{"location":"puzzles/physical/#designs-that-havent-been-built-yet","title":"Designs that haven't been built yet","text":"<ul> <li>AxBxCxD (any hypercube or hypercuboid with layers bigger than 1)</li> <li>1xAxBxC series</li> <li>1x1xAxB series</li> <li>Markk's simplex</li> <li>Markk's duoprisms</li> <li>{5}x{4} duoprism</li> <li>Akkei's 2x2x2x2x2</li> </ul>"},{"location":"puzzles/physical/2x2x2x3/","title":"Grant's 2x2x2x3","text":"<p>Grant's 2x2x2x3</p> <p></p> <p>4D Shape: Hypercuboid</p> <p>Physical Shape: Rectangular prism</p> <p>Pieces: 16 4c, 8 3c</p> <p>Magnets: 1152</p> <p>Completed: 2022 Feb 3</p> <p>Grant's 2x2x2x3 is a physical 4D twisty puzzle that was designed and 3D printed by Grant S. It works almost the same to its virtual counterpart, with the restrictions of only certain moves being canonical, plus the extra gyro algorithms needed to rotate the puzzle 4 dimensionally.</p>"},{"location":"puzzles/physical/2x2x2x3/#history","title":"History","text":"<p>In December of 2021, Melinda green posted this image to the Hypercubers Discord server, jokingly calling it a 2x2x2x3:</p> <p></p> <p>After Melinda posted that, Luna started sketching out some ideas of possible layouts for an actual 2x2x2x3.</p> <p></p> <p>She invented the design for the 3c pieces by dividing the edges of a cube into 12 sections like this, grouping 4 sets of 3 together symmetrically.</p> <p>This is when Grant joined the server, and shared his 3D printed 2x2x2x2. Rowan then challenged him to build Luna's design for the 2x2x2x3. After a lot of time tweaking the designs, printing them, magnetizing them, and assembling them, the 2x2x2x3 was completed on February 3rd 2022.</p> <p></p>"},{"location":"puzzles/physical/2x2x2x3/#how-does-it-work","title":"How Does it Work?","text":"<p>It follows the same basic principles as Melinda's 2x2x2x2, except gyros get more complicated. Grant made a YouTube video showing off the legal twists, and how it matched the virtual puzzle in MPU exactly.</p>"},{"location":"puzzles/physical/2x2x3x3/","title":"Grant's 2x2x3x3","text":"<p>Grant's 2x2x3x3</p> <p></p> <p>4D Shape: Hypercuboid</p> <p>Physical Shape: Rectangular prism</p> <p>Pieces: 16 4c, 16 3c, 4 2c</p> <p>Magnets: 1728</p> <p>Completed: 2022 May 14</p>"},{"location":"puzzles/physical/2x2x3x3/#history","title":"History","text":"<p>After the invention of grant's 2x2x2x3, hypercubers were already thinking about what was next. The 2x2x3x3 has an extra middle layer that the 2x2x2x3 doesn't have, which introduces the 2c piece to the design. Hactar designed the new 2c piece, and then Grant made the first rendering of what a physical 2x2x3x3 would look like.</p> <p></p> <p>It took a while to get the designs just right, but after printing and assembling 4 of the new 2c pieces and 8 more 3c pieces, the puzzle was completed on May 14th, 2022. </p>"},{"location":"puzzles/physical/2x2x3x3/#functionality","title":"Functionality","text":"<p>In order to prove that it was fully functional, it had to be shown that moves matched the virtual puzzle, and that it was possible to gyro the puzzle into different orientations. </p> <p>The gyro starts by removing the middle layer, and then gyroing just like the 2x2x2x3, which involves separating that middle layer and then gyroing like a 2x2x2x2. Next, the middle layer has some 4 dimensional black magic done to it, and then finally the puzzle is reassembled into the gyroed state. After doing this, Grant realized that some of the 2x2x3 cell moves aren\u2019t accessible, meaning that we actually need a 2nd type of gyro! This secondary gyro involves centering a 2x2x3 cell, and then making the middle layer stick out. Now the puzzle was fully functional.</p>"},{"location":"puzzles/physical/2x3x3x3/","title":"Grant's 2x3x3x3","text":"<p>Grant's 2x3x3x3</p> <p></p> <p>4D Shape: Hypercuboid</p> <p>Physical Shape: Rectangular prism</p> <p>Pieces: 16 4c, 24 3c, 12 2c, 2 1c</p> <p>Magnets: 2496</p> <p>Completed: 2022 Jul 6</p> <p>The next logical step to take after Grant built his 2x2x3x3 was the 2x3x3x3, which once again requires a new piece type: the 1c. But this was no big deal because a 1-colored piece only has 1 color.</p> <p>The production went pretty smoothly, and after printing 8 more 3c and 2c pieces, and 2 of the new 1c pieces, the puzzle was completed on July 6th, 2022.</p> <p>Now given what we\u2019ve seen before with the previous gyro algorithms, you\u2019d think that the 2x3x3x3 needs an extremely long complicated recursive gyro, and although the design of the puzzle has at least 15 different possible types of gyros, it turns out that it actually doesn\u2019t need one at all! All the moves are accessible from this state, which makes for a really nice solving experience.</p> <p>The 4th ever physical 4D puzzle was constructed, bringing us closer and closer to our ultimate goal: the physical 3x3x3x3.</p>"},{"location":"puzzles/physical/3x3x3x3/","title":"Grant's 3x3x3x3","text":"<p>Physical 3x3x3x3</p> <p></p> <p>4D Shape: Tesseract</p> <p>Physical Shape: Rectangular prism with 8 pieces sticking out</p> <p>Pieces: 8 1c, 24 2c, 32 3c, 16 4c</p> <p>Magnets: 3,840</p> <p>Completed: 2022 July 22</p> <p>Permutations: \\(1.7*10^{120}\\)</p>"},{"location":"puzzles/physical/3x3x3x3/#history","title":"History","text":"<p>With the expansion of Melinda\u2019s 2x2x2x2 through the hypercuboid series, only 1 puzzle remained unmade: the physical 3x3x3x3. A true 4-dimensional analog of the classic 3x3x3 Rubik\u2019s Cube.</p> <p>Melinda Green</p> <p>I can't believe progress is being made towards the holy grail. The cost and effort doesn't matter since one will have to be made if it's at all possible. (The main reason to be sure it's right) It also doesn't matter how clumsy it is to operate, though of course to get it into multiple people's hands, you'll want to explore every possible way to improve it.</p> <p>At first, it was not clear how to expand the physical 2x3x3x3 into the 3x3x3x3, as it would need extra pieces that would no longer make it a nice cuboid shape. This is because we have one more slice layer than the number of dimensions we're trying to simulate. For example a 3x3x3 has 3 slice layers, so to represent it in 2D space, some of the pieces have to stick out like this.</p> <p></p> <p>After months and months of effort, Grant completed assembling the puzzle on July 22nd, 2022. To this day, Grant has not scrambled or solved the physical 3x3x3x3 due to it being extremely big, heavy, and awkward to use. The most that was done on it was a checkerboard algorithm, but he did make a video showing off all of the hypercuboids and their legal twists.</p> <p></p> <p>In April 2023, Akkei made a new program that simulated the physical 34, and then Hyperespy became the first person to ever fully solve the physical 34. The actual gyros are pretty painful to do, but luckily the program does them for you :)</p> <p>In just under 6 months, the community went from having 1 physical 4d puzzle, to having 5!</p>"},{"location":"puzzles/physical/2x2x2x2/","title":"Melinda's 2x2x2x2","text":"<p>Melinda's 2x2x2x2</p> <p></p> <p>4D Shape: Tesseract</p> <p>Physical Shape: Rectangular prism</p> <p>Pieces: 16 4c</p> <p>Magnets: 384</p> <p>Permutations: \\(3.3*10^{27}\\)</p> <p>See Melinda's 2x2x2x2 website for her project overview.</p>"},{"location":"puzzles/physical/2x2x2x2/#history","title":"History","text":""},{"location":"puzzles/physical/2x2x2x2/#invention","title":"Invention","text":"<p>Many hypercubers, including Melinda Green (one of the developers of MC4D) wanted to create a physical 34, but sadly it just seemed too complicated. Eventually, she decided to focus on the 24 due to its simplicity of only having 16 4c pieces.</p> <p>Throughout 2013 and 2014, Melinda was in contact with Oskar van Deventer, and together they tried to think of any possible mechanism for a physical 24. Originally they were determined to find a good mechanism that didn't have to rely on magnets, but after several failed attempts a magnetic mechanism was the only solution. In 2017, Melinda built the first prototype and shared an unlisted YouTube video showing it off to the mailing list members. </p> <p>A few months later, Melinda built a 2nd prototype using 3D printing from a company called Shapeways (which just so happened to offer 8 colors, 6 of them being standard Rubik\u2019s Cube colors, plus pink and purple (this is where the standard 4D colour scheme comes from)).</p>"},{"location":"puzzles/physical/2x2x2x2/#popularization","title":"Popularization","text":"<p>Professor Erno Rubik inspecting a physical 24 at G4G 2018</p> <p></p> <p>At the Gathering For Gardner conference of 2018, Roice Nelson got to show his physical 24 to Erno Rubik. It was reported that his only comment was something along the lines of \u201cnone of the derivative puzzles matter and that only his original invention is important\u201d.</p> <p>Also in 2018, the YouCuber CanChrisSolve? made a series of videos where he solved the physical 24, which have now amassed over 100,000 views combined! A month later, a Spanish YouCuber called TheMaoiSha made a video explaining the physical 24 which now sits at over 800,000 views, exposing the world of hypercubing to more and more people.</p> <p>Because of all this recognition, many new people bought the puzzle, but it was still pretty expensive because of the costs of 3d printing and the labor of manual assembly. Eventually Melinda moved away from 3D printing in favour of injection molding, which greatly reduced the price while increasing the quality dramatically.</p> <p>Where can I buy one?</p> <p>Read this section of Melinda's website.</p>"},{"location":"puzzles/physical/2x2x2x2/#how-does-it-work","title":"How Does it Work?","text":"<p>Animations showing how the virtual and physical 24 transform into each other</p> <p> </p> <p>Each twist and rotation on the virtual 24 is possible to do on the physical puzzle, albeit with certain moves requiring some extra setup. See the canonical moves page for a more detailed explanation.</p> <p>Also see Melinda's video on the official canonical moves.</p> <p>In December of 2017, Melinda made a video fully explaining the puzzle, including its canonical moves, scrambling, and more.</p>"},{"location":"puzzles/physical/2x2x2x2/canonical-moves/","title":"Physical 2x2x2x2 Canonical Moves &amp; Notation","text":"<p>Info</p> <p>Watch Melinda Green's video for a quick overview of the canonical moves</p> <p>The Canonical Moveset is a set of moves agreed upon by the community for solving the physical 24. To get accepted into the official Hall of Fame for solving the puzzle, you must follow the canonical moves exactly.</p> <p>XYZ notation</p> <p> Because this puzzle is physically in 3-dimensional space, we can easily adapt the tandard x y z rotations for our notation.</p>"},{"location":"puzzles/physical/2x2x2x2/canonical-moves/#cell-twists","title":"Cell Twists","text":"<p>The most obvious place to start is by twisting the 2 cubic halves of the puzzle. From the standard orientation of white top, green front, purple inside, the left cell is orange and right cell is red. You can twist these 2 halves just like a cube, into any reorientation. </p> <ul> <li>future image goes here</li> </ul> <p>Each move here either starts with an L or an R, followed by the rotations (separated by commas). You could technically string it any way you like (for example if you did Lx2,y2 in a solve then you can write it that way), however a cube only has 24 different orientations.</p> <p>Left cell twists: Ly, Ly', Ly2, Lx2, Lz2, Lx2,y, Lx2,y', Lx, Lx,y, Lx,y', Lx,y2, Lx', Lx',y, Lx',y', Lx',y2, Lz, Lz,y, Lz,y', Lz,y2, Lz', Lz',y, Lz',y', Lz',y2</p> <p>Right cell twists: Ry, Ry', Ry2, Rx2, Rz2, Rx2,y, Rx2,y', Rx, Rx,y, Rx,y', Rx,y2, Rx', Rx',y, Rx',y', Rx',y2, Rz, Rz,y, Rz,y', Rz,y2, Rz', Rz',y, Rz',y', Rz',y2</p>"},{"location":"puzzles/physical/2x2x2x2/canonical-moves/#insideoutside-twists","title":"Inside/Outside Twists","text":"<p>The inside cell is the side with the next most turning freedom after L and R. This was referred to as an \"axial twist\" in Melinda's video. The only canonical move for the inside cell is Ix* (Ix, Ix', and Ix2). This is kind of difficult to fingertrick, so most people split it up into 2 illegal twists (if it were a 2x2x4, then it would be 2 90 degree twists like L R').</p> <p>You can also turn the Outside cell in the exact same way.</p> <ul> <li>future image goes here</li> </ul>"},{"location":"puzzles/physical/2x2x2x2/canonical-moves/#slab-twists","title":"Slab Twists","text":"<p>The remaining canonical twists involve picking up a 2x2x4 \"slab\" off the puzzle, and rotating it 180 degrees in the same plane. These slabs you can pick up are the U, F, D, and B cells. Because the slabs can only be turned 180 degrees those moves will just be referred to as U2, F2, D2, and B2. </p>"},{"location":"puzzles/physical/2x2x2x2/canonical-moves/#gyro","title":"Gyro","text":"<p>If you try to scramble the puzzle with all the moves above, you will quickly notice that the 2 colours on the x-axis aren't mixing with the other colours.</p> <p>The gyro is a loose term that refers to special 4D puzzle rotations that change a certain axis so that you can use different moves. Without using a gyro, there's nothing you can do to change what stickers are on the x-axis.</p> <p></p> <p>There are several different algorithms for this, some of which gyro different axes. Melinda has several videos about different gyro algorithms, the shortest known one being 6 snaps. Below is a common gyro algorithm that several people in the community use.</p> <ul> <li>Take the left endcap off and put it on the right so it becomes the right endcap (this brings the puzzle into the inverted state)</li> <li>Ly Ry'</li> <li>Take the right endcap off and put it on the left so it becomes the left endcap (this brings the puzzle back into the normal state)</li> <li>Rx2 B2 D2 Lx2</li> </ul> <p>Note</p> <p>Note that the last 2 moves (D2 Lx2) could be replaced by D2 Rx2, U2 Lx2, or U2 Rx2 based on the solver's preference. Watch [Melinda's 6 Snap Gyro] for an alternative algorithm. </p>"},{"location":"puzzles/physical/2x2x2x2/canonical-moves/#expanded-canonical-moveset","title":"Expanded Canonical Moveset","text":"<p>The expanded moveset is what is accepted for the Hypercubing.xyz leaderboards. These moves all correspond perfectly with twists on the virtual puzzle, but weren't allowed in the canonical moveset because people agreed not to for some reason.</p>"},{"location":"puzzles/physical/2x2x2x2/canonical-moves/#extra-slab-twists","title":"Extra slab twists","text":""},{"location":"puzzles/physical/2x2x2x2/canonical-moves/#extra-io-cell-twists","title":"Extra I/O cell twists","text":"<p>Iz2, Iy2, Oz2, and Oy2 are added (although they are very hard to fingertrick and perform quickly).</p>"},{"location":"puzzles/physical/2x2x2x2/scramble-generator/","title":"Physical 2x2x2x2 Scramble Generator","text":"<p>Scrambles: 5</p> <p> Generate Scrambles</p> <p>Scrambles</p> <p><p></p> </p>"},{"location":"software/","title":"Software","text":"<p>Hypercubing is mostly experienced through the various programs that exist to simulate higher dimensional puzzles. Below is a list of the programs.</p>"},{"location":"software/#what-program-should-i-download","title":"What program should I download?","text":"<p>It depends on what exactly you want to do. If you want the best experience for solving the n4, then Hyperspeedcube is the way to go.</p> <p>If you want to level up to higher dimensions, then try MC5D, MC7D, MPU, and MS5D.</p> <p>If you want to try puzzles in Non-Euclidean geometries, then try Magic Tile and Magic Hyperbolic Tile.</p> <p>For Android phones and tablets, you can download MC4D from the Google Play Store.</p>"},{"location":"software/#recommended-hypercubing-software","title":"Recommended hypercubing software","text":"<ul> <li>Hyperspeedcube</li> <li>Magic Cube 4D</li> <li>Magic Tile</li> </ul>"},{"location":"software/#other-hypercubing-software","title":"Other hypercubing software","text":"<ul> <li>Magic Puzzle Ultimate</li> <li>Magic Cube 5D</li> <li>Magic Cube 7D</li> <li>Magic 120 Cell</li> <li>Magic Simplex 5D</li> <li>Magic Cube 4D VR</li> <li>Nan Ma's 11-cell</li> <li>Magic Hyperbolic Tile</li> <li>akkei's physical 34 program</li> </ul>"},{"location":"software/#hypercubing-software-for-mobile-not-recommended","title":"Hypercubing software for mobile (not recommended)","text":"<ul> <li>Magic Cube 4D</li> <li>The Tesseract Puzzle</li> <li>4D Hypercube Puzzle</li> </ul>"},{"location":"software/#other-recommended-4d-software","title":"Other recommended 4D software","text":"<ul> <li>4D Blocks</li> </ul>"},{"location":"software/#other-recommended-cubing-software","title":"Other recommended cubing software","text":"<ul> <li>pCubes</li> <li>Nan Ma's RefleCube</li> <li>Arnaud Ch\u00e9ritat's Hungarian Rings</li> <li>gelatinbrain's Virtual Magic Polyhedra (permutationpuzzles)</li> <li>Magic Cube 3D</li> </ul>"},{"location":"software/hyperspeedcube/","title":"Hyperspeedcube","text":"<p>Hyperspeedcube is a modern, beginner-friendly 3D and 4D Rubik\u2019s cube simulator with customizable mouse and keyboard controls and advanced features for speedsolving. It\u2019s been used to break numerous speedsolving records.</p> <p> </p>"},{"location":"software/hyperspeedcube/#downloadinstallation","title":"Download/installation","text":"<p>It's recommended to download the Hyperspeedcube program (which is available on Windows, MacOS, and Linux), although a web version is available as well. The latest version is  and can be downloaded from the website here:</p> <p>Download Hyperspeedcube </p> <p>On Windows, it will download as a <code>.zip</code> file. After extracting the files and saving them to the destination of your choice, simply launch the <code>hyperspeedcube.exe</code> file. This is the program, so make sure you save it somewhere you can remember!</p>"},{"location":"software/hyperspeedcube/#troubleshooting","title":"Troubleshooting","text":"Windows: <code>download failed - virus detected</code> <p>If it immediately says <code>failed - virus detected</code> just after downloading, then your antivirus software thinks it is a virus. Try opening the Windows Security app, and digging around in the settings there to disable it, then try the download again.</p> Windows: <code>Windows protected your PC</code> <p>If you get a message that says <code>Windows protected your PC</code> and it <code>prevented an unrecognized app from starting</code> after trying to run the <code>hyperspeedcube.exe</code> file for the first time, then click on the <code>more info</code> button, and then click <code>run anyway</code>.</p> MacOS: <code>unidentified developer</code> <p>On MacOS, it might say: <code>\"Hyperspeedcube\" can not be opened because it is from an unidentified developer</code>. Try going to System Preferences &gt; Security &amp; Privacy &gt; then click Allow next to where it says Hyperspeedcube is from an unidentified developer.</p> <p>If you\u2019re having other trouble with Hyperspeedcube, join the Hypercubers Discord server and ping @HactarCE or @Hyperspeedcube Developer.</p>"},{"location":"software/hyperspeedcube/#historydevelopment","title":"History/Development","text":"<p>Hyperspeedcube, or HSC, is the brainchild of Andrew Farkas (AKA HactarCE). Initially called Keyboard Speedcube and only supporting 3D Rubik's Cubes, the first screenshot was shared with the Hypercubers Discord on October 25th, 2021. A month later, Rowan Fortier asked Hactar if he could receive an early version of the program, and showcased it in a YouTube video. </p> <p> </p> <p>The program was renamed to Hyperspeedcube, and many community requested features were added. For a complete list of all releases and changes, see the changelog on HSC's GitHub page.</p>"},{"location":"software/hyperspeedcube/#future-updates","title":"Future updates","text":"<p>HSC 2.0 is the next major update in the works, with no set release date as of yet. Below is a list of upcoming features:</p> <ul> <li>Build nearly any puzzle in 3D to 7D space</li> <li>Complete overhaul of the graphics engine</li> <li>Built in timer for speedsolves, including an autosplitter for the most common method(s?)</li> <li>Timeline of progress during solve</li> <li>More piece filter customization</li> </ul> <p> </p> <p> </p> <p> Development screenshots by Hactar  </p>"},{"location":"software/magiccube4d/","title":"Magic Cube 4D","text":"<p>Magic Cube 4D was one of the first ever programs capable of simulating higher dimensional twisty puzzles. It was made starting in 1988 by Melinda Green, Don Hatch, Jay Berkenbilt, and Roice Nelson.</p> <p> <p> 34 puzzle in Magic Cube 4D  </p>"},{"location":"software/magiccube4d/#downloadinstallation","title":"Download/installation","text":"<p>Magic Cube 4D requires java to be installed. Then go to the Superliminal website, and click on the <code>Click here to download MagicCube4D</code> button. Save the executable <code>mc4d-4-3-343.jar</code> file somewhere you will remember, as this file is how you open the program.</p>"},{"location":"software/magiccube4d/#alternative-versions","title":"Alternative versions","text":""},{"location":"software/magiccube4d/#raynefork","title":"Raynefork","text":"<p>Raynefork is Raymond Zhao's version of MC4D, which has the updated default colour scheme (standard 33 colours plus pink/purple), and some more options in the settings menu. It can be found from its GitHub here.</p>"},{"location":"software/magiccube4d/#dons-version","title":"Don's version","text":"<p>Don's version contains some 2D puzzles, many 3D puzzles, and some interesting 4D puzzles. It also has a menu for 5D and 6D puzzles, however they don't work when you select them. Don's version can be downloaded from its GitHub here.</p>"},{"location":"software/magiccube4d/#troubleshooting","title":"Troubleshooting","text":"<p>First off, you should read MC4D's FAQ on the superliminal website.</p> my computer wants to open the <code>.jar</code> file with notepad <p>This means that you haven't installed java properly. Make sure to get the newest version from Java's website. After the installation, right click on the <code>mc4d-4-3-343.jar</code> file, and click <code>open with Java(TM) Platform SE Binary</code>.</p> facecolors.txt doesn't change my colors <ol> <li>Try closing and reopening the program, and then reloading the puzzle using the menu.</li> <li>If you're on windows and you have show file extensions off in settings, then you may have accidentally named the file <code>facecolors.txt.txt</code>. Try renaming it to just <code>facecolors</code>. (Alternatively, enable show file extensions in settings)</li> </ol>"},{"location":"software/magicpuzzleultimate/","title":"Magic Puzzle Ultimate","text":"<p>Magic Puzzle Ultimate (MPU) is a program made by Andrey Astrelin that simulates a lot of different puzzles, as well as letting you define your own.</p> <p>Download MPU</p> <p></p> <p> 32-cell puzzle in MPU </p>"},{"location":"software/magicpuzzleultimate/#records","title":"Records","text":"<p>Some records for the shortest and first solutions of a puzzle are kept on the Superliminal Wiki page.</p>"},{"location":"software/magicpuzzleultimate/#virtual-puzzles","title":"Virtual Puzzles","text":"<p>While we're waiting for Hyperspeedcube 2.0 to release, Magic Puzzle Ultimate is a great program to get your feet wet in the world of other 4D puzzles.</p> <p>Open the location where your <code>MPUlt</code> folder is. Next, open the <code>MPUlt_puzzles.txt</code> file. This file is a big list of all the puzzles in the program. Now you can copy &amp; paste the puzzles that you want below under their appropriate <code>Block</code>. Just save the file, reopen MPUlt, and the puzzle you added will be in the menu.</p>"},{"location":"software/magicpuzzleultimate/#puzzle-definitions","title":"Puzzle Definitions","text":"3D Puzzles 3x3x3 3x3x3<pre><code>Puzzle 3x3x3\nDim 3\nNAxis 1\nFaces 1,0,0\nGroup 1,0,0/1,1,0 1,0,0/1,0,1\nAxis 1,0,0\nTwists 0,1,0/0,1,1\nCuts -0.33 0.33\n</code></pre> Skewb Skewb<pre><code>Puzzle Skewb\nDim 3\nNAxis 1\nFaces 1,0,0\nGroup 1,0,0/1,1,0 1,0,0/1,0,1\nAxis 1,1,1\nTwists 1,-1,0/1,0,-1\nCuts 0\n</code></pre> Compy Rainbow Compy Rainbow<pre><code>Puzzle Compy_Rainbow\nDim 3\nNAxis 1\nFaces 1,0,0 0.6667,0.6667,0.6667\nGroup 1,0,0/1,1,0 1,0,0/1,0,1\nAxis 1,1,1\nTwists 1,-1,0/1,0,-1\nCuts -0.45 0.45\nFixedMask 2\n</code></pre> Cuboctahedron Cuboctahedron<pre><code>Puzzle Cuboctahedron\nDim 3\nNAxis 2\nFaces 1,0,0 0.667,0.667,0.667\nGroup 1,0,0/1,1,0 1,0,0/1,0,1\nAxis 1,0,0\nTwists 0,1,0/0,1,1\nCuts 0.5 -0.5\nAxis 1,1,1\nTwists 1,-1,0/1,0,-1\nCuts 0.5 -0.5\n</code></pre> 4D Puzzles Tesseract Family 2x2x1x1 2x2x1x1<pre><code>Puzzle 2x2x1x1\nDim 0\nNAxis 2\nFaces 1,0,0,0 0,0,0,0.5\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/0,0,1,0 1,0,0,0/0,0,0,1 0,1,0,0/0,0,1,0 0,1,0,0/0,0,0,1 0,0,1,0/0,0,1,1\n</code></pre> 2x2x2x1 2x2x2x1<pre><code>Puzzle 2x2x2x1\nDim 4\nNAxis 2\nFaces 1,0,0,0 0,0,0,0.5\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,0,0/0,0,0,1\nCuts 0 0\nAxis 0,0,0,1\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0\nCuts\n</code></pre> 2x2x2x3 2x2x2x3<pre><code>Puzzle 2x2x2x3\nDim 4\nNAxis 2\nFaces 1,0,0,0 0,0,0,1.5\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,0,0/0,0,0,1\nCuts 0\nAxis 0,0,0,1\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0\nCuts 0.5 -0.5\n</code></pre> 2x2x3x3 2x2x3x3<pre><code>Puzzle 2x2x3x3\nDim 4\nNAxis 2\nFaces 1,0,0,0 0,0,1.5,0\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/0,0,1,0 0,0,1,0/0,0,1,1\nAxis 1,0,0,0\nTwists 0,0,1,0/0,0,1,1 0,1,0,0/0,0,1,0 0,1,0,0/0,0,1,1\nCuts 0\nAxis 0,0,1,0\nTwists 1,0,0,0/1,1,0,0 0,0,0,1/1,0,0,0 0,0,0,1/1,1,0,0\nCuts 0.5 -0.5\n</code></pre> 2x2x3x4 2x2x3x4<pre><code>Puzzle 2x2x3x4\nDim 4\nNAxis 3\nFaces 1,0,0,0 0,0,1.5,0 0,0,0,2\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/0,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,0,1,0 0,1,0,0/0,0,0,1 0,0,1,0/0,0,0,1\nCuts 0\nAxis 0,0,1,0\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/0,0,0,1 0,0,0,1/0,1,0,0\nCuts 0.5 -0.5\nAxis 0,0,0,1\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/0,0,1,0 0,0,1,0/0,1,0,0\nCuts 1 0 -1\n</code></pre> 2x3x4x5 2x3x4x5<pre><code>Puzzle 2x3x4x5\nDim 4\nNAxis 4\nFaces 1,0,0,0 0,1.5,0,0 0,0,2,0 0,0,0,2.5\nGroup 1,0,0,0/0,1,0,0 1,0,0,0/0,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,0,1,0 0,1,0,0/0,0,0,1 0,0,1,0/0,0,0,1\nCuts 0\nAxis 0,1,0,0\nTwists 1,0,0,0/0,0,1,0 1,0,0,0/0,0,0,1 0,0,1,0/0,0,0,1\nCuts 0.5 -0.5\nAxis 0,0,1,0\nTwists 1,0,0,0/0,1,0,0 1,0,0,0/0,0,0,1 0,0,0,1/0,1,0,0\nCuts 1 0 -1\nAxis 0,0,0,1\nTwists 1,0,0,0/0,1,0,0 1,0,0,0/0,0,1,0 0,0,1,0/0,1,0,0\nCuts 1.5 0.5 -0.5 -1.5\n</code></pre> 3x3x3x1 3x3x3x1<pre><code>Puzzle 3x3x3x1\nDim 4\nNAxis 2\nFaces 1.5,0,0,0 0,0,0,0.5\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,0,0/0,0,0,1\nCuts 0.5 -0.5\nAxis 0,0,0,1\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0\nCuts\n</code></pre> 3x3x3x2 3x3x3x2<pre><code>Puzzle 3x3x3x2\nDim 4\nNAxis 2\nFaces 1.5,0,0,0 0,0,0,1\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,0,0/0,0,0,1\nCuts -0.5 0.5\nAxis 0,0,0,1\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0\nCuts 0\n</code></pre> 4x4x4x4 4x4x4x4<pre><code>Puzzle 4^4\nDim 4\nNAxis 1\nFaces 1,0,0,0\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/1,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,-1,0/0,0,0,1 0,2,-1,-1/0,1,1,-2\nCuts 0.5 0 -0.5\n</code></pre> Other {4}x{4} 3 {4}x{4} 3<pre><code>Puzzle {4}x{4} 3\nDim 4\nNAxis 2\nFaces 1,0,0,0 0,0,1,0\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/0,0,1,0 0,0,1,0/0,0,1,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,0,1,0 0,0,1,0/0,0,1,1\nCuts 0.5 -0.5\nAxis 0,0,1,0\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/0,0,0,1\nCuts 0.5 -0.5\n</code></pre> 3^4 Skewb 3^4 Skewb<pre><code>Puzzle 3^4 Skewb\nDim 4\nNAxis 1\nFaces 1,0,0,0\nSimplified\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/1,0,0,1\nAxis 1,1,1,1\nTwists 0,2,-1,-1/0,1,1,-2 1,-1,0,0/0,0,1,-1\nCuts 0\n</code></pre> 5-5_Duotegum 5-5_Duotegum<pre><code>Puzzle 5-5_Duotegum\nDim 4\nNAxis 1\nFaces -1,1,0,0\nGroup 1,0,0,0/0.809016994,0,0.587785252,0 1,1,0,0/0,0,1,1\nAxis -1,1,0,0\nTwists 0,0,1,0/0,0,0,1 1,1,0,0/0,0,1,1 1,1,0,0/0,0,-1,1\nCuts 0.65\n</code></pre> 16-cell Face Turning 16-cell Face Turning<pre><code>Puzzle 16-cell_FT\nDim 4\nNAxis 1\nFaces 1,1,1,1\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/1,0,0,1\nAxis 1,1,1,1\nTwists 0,2,-1,-1/0,1,1,-2 1,-1,0,0/0,0,1,-1\nCuts 0.6 -0.6\nFixedMask 2\n</code></pre> Chamfered Pentagonal Duoprism Chamfered Pentagonal Duoprism<pre><code>Puzzle Chamfered_Pentagonal_Duoprism\nDim 4\nNAxis 2\nFaces -1.41429,0,0,0 1.41429,0,0,0 -1,1,0,0\nGroup 1,0,0,0/0.809016994,0,0.587785252,0 1,1,0,0/0,0,1,1\nAxis -1,0,0,0\nTwists 0,1,0,0/0,0.809016994,0,0.587785252 0,0,1,0/0,0,0,1\nCuts 1.3 -1.23\nAxis -1,1,0,0\nTwists 0,0,1,0/0,0,0,1 1,1,0,0/0,0,1,1 1,1,0,0/0,0,-1,1\nCuts 0.85\n</code></pre> Chamefered Tesseract Chamfered Tesseract<pre><code>Puzzle Chamfered_Tesseract\nDim 4\nNAxis 2\nFaces 1,0,0,0 0.70710678,0.70710678,0,0\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/1,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,0,0/0,1,0,1 0,0,1,0/0,0,1,1\nCuts 0.85 -0.85\nAxis 1,1,0,0\nTwists 0,0,1,0/0,0,1,1 1,-1,0,0/0,0,1,0 1,-1,0,0/0,0,1,1\nCuts 0.57 -0.57\n</code></pre> Octahedral Prism Octahedral Prism<pre><code>Puzzle Octahedral_Prism\nDim 4\nNAxis 2\nFaces 1,0,0,0 0,1,1,1\nGroup 1,0,0,0/0,1,0,0 0,1,0,0/0,1,1,0 0,1,0,0/0,1,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,1,0/0,0,1,1 0,1,0,0/0,0,1,1\nCuts 0.5 -0.5\nAxis 0,1,1,1\nTwists 0,1,-1,0/0,1,0,-1 1,0,0,0/0,1,-1,0\nCuts 0.5 -0.5\n</code></pre> Snub 24-cell Snub 24-cell<pre><code>Puzzle Snub24cell\nDim 4\nNAxis 2\nFaces 1,0,0,0 0.809017,0.809017,0,0 0.9045085,0.6545085,0.25,0\n#Faces 1,0,0,0 0.809017,0.809017,0,0 0.9045085,0.6545085,0.25,0 0.9045085,0.6545085,-0.25,0\nGroup 0,2,-1,-1/0,1,1,-2 0,1,1,2/0,2,-1,1 2,-2,-2,0/1,-1,-1,3\nAxis 1,0,0,0\nTwists 0,2,-1,-1/0,1,1,-2 0,0,1,0/0,0,0,1 0,1,1,2/0,2,-1,1\nCuts 0.9 -0.9\nFixedMask 2\nAxis 0.809017,0.809017,0,0\nTwists 2,-2,-2,0/1,-1,-1,3 1,-1,-1,-3/2,-2,-2,0 0,0,0,1/0,0,1,0\nCuts 0.95 -0.95\nFixedMask 2\n</code></pre> Square Antiprism Prism Square Antiprism Prism<pre><code>Puzzle Square_Antiprism_Prism\nDim 4\nNAxis 3\nFaces -0.5,0,0,0 0,0,0.42044820,0 0,0.56903559,0.14014940,0\nGroup 0,0,1,0/0,0.38268343,0,0.92387953 0,0,0,1/0,1,0,1 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,0,1 0,0,1,0/0,0.38268343,0,0.92387953 0,0,1,0/0,-0.38268343,0,0.92387953\nCuts 0.1666 -0.1666\nAxis 0,0,1,0\nTwists 0,1,0,0/0,1,0,1 1,0,0,0/0,1,0,0 1,0,0,0/0,1,0,1\nCuts 0.1235 -0.1235\nAxis 0,0.56903559,0.14014940,0\nTwists 1,0,0,0/0,0,0,1\nCuts 0.621\n</code></pre> Triangular Antitegmatic Icoschoron Triangular Antitegmatic Icosachoron<pre><code>Puzzle Triangular-antitegmatic_Icosachoron\nDim 4\nNAxis 1\nFaces 1,0,0,0\nGroup 1,0,0,0/0.5,0.866025404,0,0 0,0.577350269,0.816496581,0/0,0,0.612372436,0.790569415\n#1,0,0,0/0.5,sqrt(3)/2,0,0 0,1/sqrt(3),sqrt(2/3),0/0,0,1/sqrt(6),sqrt(5/6) \nAxis 1,0,0,0\nTwists 0,0.577350269,0.816496581,0/0,0,0.612372436,0.790569415 0,0.790569,-0.559017,0.25/0,0.57735,1.22474,0.912871\nCuts 0.75 -0.75\n</code></pre> 5D Puzzles Penteract Family 1x1x1x1x2 1x1x1x1x2<pre><code>Puzzle 1x1x1x1x2\nDim 5\nNAxis 2\nFaces 0.5,0,0,0,0 0,0,0,0,1\nGroup 1,0,0,0,0/1,1,0,0,0 1,0,0,0,0/1,0,1,0,0 1,0,0,0,0/1,0,0,1,0 1,0,0,0,0/0,0,0,0,1\nAxis 1,0,0,0,0\nTwists 0,1,0,0,0/0,1,1,0,0 0,1,0,0,0/0,0,0,0,1\nCuts\nAxis 0,0,0,0,1\nTwists 1,0,0,0,0/1,1,0,0,0\nCuts 0\n</code></pre> 1x1x1x2x2 1x1x1x2x2<pre><code>Puzzle 1x1x1x2x2\nDim 5\nNAxis 2\nFaces 0.5,0,0,0,0 0,0,0,1,0\nGroup 1,0,0,0,0/1,1,0,0,0 1,0,0,0,0/1,0,1,0,0 1,0,0,0,0/0,0,0,1,0 0,0,0,1,0/0,0,0,1,1\nAxis 1,0,0,0,0\nTwists 0,1,0,0,0/0,1,1,0,0 0,1,0,0,0/0,0,0,1,0 0,0,0,1,0/0,0,0,1,1\nCuts\nAxis 0,0,0,1,0\nTwists 1,0,0,0,0/1,1,0,0,0 1,0,0,0,0/1,0,1,0,0 1,0,0,0,0/0,0,0,0,1\nCuts 0\n</code></pre> 1x1x2x2x2 1x1x2x2x2<pre><code>Puzzle 1x1x2x2x2\nDim 5\nNAxis 2\nFaces 0.5,0,0,0,0 0,0,1,0,0\nGroup 1,0,0,0,0/1,1,0,0,0 1,0,0,0,0/0,0,1,0,0 0,0,1,0,0/0,0,1,1,0 0,0,1,0,0/0,0,1,0,1\nAxis 1,0,0,0,0\nTwists 0,1,0,0,0/0,0,1,0,0 0,0,1,0,0/0,0,1,1,0\nCuts\nAxis 0,0,1,0,0\nTwists 1,0,0,0,0/1,1,0,0,0 1,0,0,0,0/0,0,0,1,0 0,0,0,1,0/0,0,0,1,1\nCuts 0\n</code></pre> 1x2x2x2x2 1x2x2x2x2<pre><code>Puzzle 1x2x2x2x2\nDim 5\nNAxis 2\nFaces 0.5,0,0,0,0 0,1,0,0,0\nGroup 1,0,0,0,0/0,1,0,0,0 0,1,0,0,0/0,1,1,0,0 0,1,0,0,0/0,1,0,1,0 0,1,0,0,0/0,1,0,0,1\nAxis 1,0,0,0,0\nTwists 0,1,0,0,0/0,1,1,0,0\nCuts\nAxis 0,1,0,0,0\nTwists 1,0,0,0,0/0,0,1,0,0 0,0,1,0,0/0,0,1,1,0\nCuts 0\n</code></pre> 2x2x2x2x2 2x2x2x2x2<pre><code>Puzzle 2^5\nDim 5\nNAxis 1\nFaces 1,0,0,0,0\nGroup 1,0,0,0,0/1,1,0,0,0 1,0,0,0,0/1,0,1,0,0 1,0,0,0,0/1,0,0,1,0 1,0,0,0,0/1,0,0,0,1\nAxis 1,0,0,0,0\nTwists 0,1,0,0,0/0,1,1,0,0\nCuts 0\n</code></pre> Other Simplex Prism Simplex Prism<pre><code>Puzzle Simplex_Prism\nDim 5\nNAxis 2\nFaces 0,0,0,0,1 1,0,0,0,0\nGroup 1,0,0,0,0 0,0,1,1,0/0,0,1,-1,0 0,2,-1,-1,0/0,1,1,-2,0 0,2,-2,0,0/0,1,1,-1,-2.236068\nAxis 0,0,0,0,1\nTwists 1,0,0,0,0/0,1,-1,0,0 0,0,1,1,0/0,0,1,-1,0 0,2,-1,-1,0/0,1,1,-2,0\nCuts 0\nAxis 1,0,0,0,0\nTwists 0,2,-1,-1,0/0,1,1,-2,0\nCuts 0\n</code></pre> {3,3}x{4} {3,3}x{4}<pre><code>Puzzle {3,3}x{4}\nDim 5\nNAxis 2\nFaces 1,1,1,0,0 0,0,0,1.73205081,0\nGroup 1,1,0,0,0/1,0,-1,0,0 1,1,0,0,0/0,1,-1,0,0 0,0,0,1,0/0,0,0,1,1\nAxis 1,1,1,0,0\nTwists 0,0,0,1,0/0,0,0,1,1 1,-1,0,0,0/1,0,-1,0,0 1,-1,0,0,0/0,0,0,1,0\nCuts -0.33333\nAxis 0,0,0,1,0\nTwists 1,1,0,0,0/1,0,-1,0,0 0,0,0,0,1/1,-1,0,0,0\nCuts 0\n</code></pre>"},{"location":"software/magicpuzzleultimate/#making-your-own-puzzles","title":"Making your own puzzles","text":"<p>If you figure out the notation, you can try adding your own puzzles. You define the symmetry group, rotational axes, cutting planes, possible twists and puzzle boundary.</p> <p>There is also a general formula for 4D duoprism puzzles, made by Luna: {p}x{q}<pre><code>Puzzle {p}x{q}\nDim 4\nNAxis 2\nFaces 1,0,0,0 0,0,1,0\nGroup 1,0,0,0/1,tan(pi/p),0,0 0,0,1,0/0,0,1,tan(pi/q)\nAxis 1,0,0,0\nTwists 0,1,0,0/0,0,0,1 0,0,1,0/0,0,1,tan(pi/q)\nCuts ...\nAxis 0,0,1,0\nTwists 0,0,0,1/0,1,0,0 1,0,0,0/1,tan(pi/p),0,0\nCuts ...\n</code></pre></p>"},{"location":"techniques/","title":"Solving Techniques","text":"<p>Hypercubing methods typically rely on a few fundamental techniques. By mastering these, you can even develop your own solutions to new puzzles.</p> <p>Learn Notation before trying to learn any of these techniques</p> <ul> <li>Commutators</li> <li>Dimensional Reduction</li> <li>RKT</li> </ul>"},{"location":"techniques/commutators/","title":"Commutators","text":"<p>A commutator (or comm) is a sequence of moves where you do a sequence A, then a sequence B, then the inverse of A, and finally the inverse of B. After completion, only specific pieces are affected, making it easier to solve the puzzle.</p> <p>One of the earliest solutions for the 3x3x3x3 was The Ultimate Solution to a 3x3x3x3 by Roice Nelson, which made heavy use of intuitive setup moves and commutators. Commutators were also much easier to use in MC4D due to the Macro feature, which could automatically execute any sequence of moves that you defined.</p>"},{"location":"techniques/commutators/#notation","title":"Notation","text":"<p>Commutators are notated <code>[A, B]</code>, which means to do <code>A B A' B'</code>.</p> <p>For example, the commutator <code>[M', U2]</code> cycles 3 edges in the M layer of a 3x3x3. Written out, it would be <code>M' U2 M U2</code>. </p> <p>Commutators can also be nested within commutators, such as <code>[D, [R, U]]</code>, which is a cycle of 3 corners, <code>D R U R' U' D' U R U' R'</code></p>"},{"location":"techniques/commutators/#strategy","title":"Strategy","text":"<p>Once you find commutators for cycling different types of pieces on a puzzle (2c, 3c, etc) then you can almost solve the whole thing! (There may be some situations where you need an algorithm to swap 2 pieces of a type and 2 of a different type.)</p>"},{"location":"techniques/dimensional-reduction/","title":"Dimensional Reduction","text":"<p>Not to be confused with Big Cube Reduction</p> <p>Dimensional reduction is a technique to reduce an nd puzzle into an nd-1 puzzle. It does this by pairing up n-piece long bars (e.g. to reduce 34 into 33, pair up 3-piece long bars).</p> <p>To get to the dimensionally reduced state from a solved 34, do only turns that don't change the colours of the I/O axis (moves that look like big 33 moves).</p> <p>Below is Andrey's log file of a 3x3x3x3 solve done with dimensional reduction. It's essentially a CFOP solve, but with some advanced pseudo-slotting and commutators. It's sort of like doing Pseudo F2L (where the pairs can be in any slot), and then doing OLC/PLC, except solving the PLC into the scrambled reduced state of the rest of the puzzle.</p> Andrey_34.log Andrey_34.log<pre><code>MagicCube4D 3 0 315 {4,3,3} 3\n-0.18955569589822457 0.43991704061351233 -0.877805009971115 -2.7145128148370095E-16\n-2.839993659326744E-9 1.4847274022149884E-10 6.876845398745129E-10 -1.0\n-0.14794206390078768 -0.8966035341133775 -0.41739100175276544 8.357431997622695E-19\n0.970660488472316 -0.05074544307867573 -0.2350385417871584 -2.925836319069701E-9\n*\n104,1,1 12,-1,2 82,1,4 72,1,4 101,-1,1 58,1,4 169,1,4 136,1,2 174,-1,1 158,-1,2\n100,-1,2 44,-1,2 156,1,4 201,-1,1 141,-1,4 40,1,4 208,1,2 162,1,2 143,1,2 171,1,1\n208,-1,1 144,1,4 182,-1,1 56,-1,2 186,1,4 126,1,1 200,-1,2 120,-1,2 156,1,1 194,1,2\n166,-1,2 85,1,1 6,-1,1 143,-1,1 120,1,2 182,-1,2 147,1,4 203,1,1 71,-1,2 192,-1,2\n73,1,2 5,-1,2 159,-1,1 124,-1,2 5,1,2 184,1,4 122,1,1 213,-1,1 m| 102,-1,1\n24,1,1 49,-1,1 20,1,1 131,-1,1 24,1,1 186,1,1 157,1,1 22,1,1 49,-1,1 211,-1,4\n209,1,1 75,-1,1 197,1,1 75,1,1 212,1,4 131,-1,1 194,1,1 131,1,1 195,-1,4 102,-1,1\n211,1,1 102,1,1 214,-1,4 184,1,1 214,-1,1 184,-1,1 214,1,4 78,-1,1 210,1,1 78,1,1\n210,-1,4 209,-1,1 76,1,1 205,1,1 76,-1,1 212,-1,4 78,-1,1 199,1,1 78,1,1 191,-1,4\n202,1,1 52,-1,1 204,1,4 132,1,1 210,1,1 210,1,1 132,-1,1 15,1,1 128,1,1 74,-1,1\n106,-1,1 214,1,4 131,1,1 195,-1,1 131,-1,1 214,-1,4 214,-1,1 187,-1,1 196,-1,4 158,-1,1\n213,1,1 158,1,1 196,1,4 155,1,1 211,1,4 78,1,1 210,-1,1 78,-1,1 22,1,1 214,1,1\n77,1,1 212,1,1 77,-1,1 206,1,1 185,-1,1 212,-1,1 185,1,1 77,1,1 212,-1,1 77,-1,1\n190,1,1 6,-1,1 48,1,1 209,-1,1 48,-1,1 190,1,4 182,1,1 160,-1,1 52,-1,1 24,1,1\n157,1,1 213,1,4 157,-1,1 198,1,1 157,1,1 213,-1,4 157,-1,1 213,1,4 74,1,1 187,-1,1\n189,-1,4 105,1,1 211,1,4 105,-1,1 214,1,1 105,1,1 211,-1,4 105,-1,1 189,1,4 187,1,1\n105,1,1 211,1,4 105,-1,1 214,1,1 105,1,1 211,-1,4 105,-1,1 3,1,1 210,1,1 130,-1,1\n212,-1,4 130,1,1 199,1,1 130,-1,1 212,1,4 130,1,1 192,1,4 74,1,1 193,-1,4 198,1,1\n76,-1,1 210,-1,4 76,1,1 201,1,1 76,-1,1 210,1,4 76,1,1 193,1,4 101,1,1 187,-1,1\n187,-1,1 200,1,4 48,-1,1 209,-1,4 48,1,1 191,1,1 48,-1,1 209,1,4 48,1,1 200,1,4\n51,-1,1 199,1,4 51,1,1 213,-1,1 51,-1,1 199,1,4 51,1,1 182,-1,1 78,1,1 202,1,4\n78,-1,1 210,1,1 210,1,1 78,1,1 202,1,4 78,-1,1 128,1,2 160,1,1 128,1,2 160,-1,1\n182,-1,2 182,-1,2 132,-1,1 202,1,4 132,1,1 196,1,1 132,-1,1 202,1,4 132,1,1 211,1,1\n211,1,1 47,-1,1 201,1,1 101,1,1 74,1,1 201,1,1 128,-1,1 155,-1,1 200,1,1 47,1,1\n155,1,1 200,1,1 52,-1,1 202,1,1 74,-1,1 128,-1,1 202,1,1 182,-1,1 160,1,1 208,1,1\n182,-1,1 155,-1,1 208,1,1 155,1,2 206,1,1 182,1,1 101,1,1 206,1,1 47,1,1 74,-1,1\n207,1,1 182,1,1 128,1,1 207,1,1 187,-1,1 197,1,1 47,1,1 74,1,1 47,-1,1 74,-1,1\n47,1,1 74,1,1 197,1,1 133,-1,1 155,-1,1 155,-1,1 133,-1,1 52,1,1 133,1,1 52,-1,1\n205,1,1 74,-1,1 182,-1,1 74,1,1 182,1,1 74,-1,1 182,-1,1 205,1,1 133,-1,1 203,1,1\n155,-1,1 101,-1,1 155,1,1 101,1,1 155,-1,1 101,-1,1 203,1,1 52,-1,1 79,1,1 52,1,1\n52,1,1 208,1,1 182,-1,1 155,-1,1 182,1,1 155,1,1 182,-1,1 155,-1,1 208,1,1 155,-1,1\n74,-1,1 74,-1,1 182,1,1 74,-1,1 182,-1,1 101,1,1 182,1,1 101,-1,1 182,1,1 101,-1,1\n101,-1,1 74,1,1 74,1,1 47,-1,1 128,1,1 155,-1,1 155,-1,1 47,-1,1 47,-1,1 79,-1,1\n79,-1,1 47,-1,2 47,-1,2 106,1,1 74,-1,1 74,-1,1 47,1,1 133,1,1 133,1,1 79,1,1\n79,1,1 101,1,2 101,1,2 187,-1,1 47,1,1 47,1,1 101,1,1 101,1,1 47,1,1 47,1,1\n101,1,1 101,1,1 47,1,1 47,1,1 74,-1,1 74,-1,1 47,-1,2 74,1,1 74,1,1 47,1,2\n74,1,1 74,1,1 133,1,1 133,1,1.\n</code></pre> <p>The move count is extremely low, which is pretty cool.</p>"},{"location":"techniques/rkt/","title":"RKT","text":"<p>You must know 34 notation in order for this page to make sense!</p> <p>RKT is a technique that lets you treat a single cell of a (cell-turning) higher dimensional puzzle as if it were a lower dimensional puzzle. This is very useful to do moves that damage fewer pieces. For example: RKT lets you treat a side of a 34 just like a 33 cube, meaning that you can use all the 3D algorithms you already know to solve the full 4D puzzle.</p> <p>It has been invented independently several times, but was mainly popularized by Raymond Zhao in his article here.</p>"},{"location":"techniques/rkt/#naming","title":"Naming","text":"<p>Other proposed names:</p> <ul> <li>SFM (Single Facet Manipulation)</li> <li>FRM (Facet Redution Method)</li> </ul> <p>The name RKT comes from the move set <code>&lt;RK,T*&gt;</code> on n4 puzzles (in the old notation, the Inside and Outside cells were called Top and Kata). In the new notation it should be called ROI, but the old name stuck.</p> <p>Grant</p> <p>Also it's the part of the solve where you can get ReKT</p>"},{"location":"techniques/rkt/#doing-moves-with-rkt-n4","title":"Doing moves with RKT (n4)","text":"<p>RKT lets us do any n3 sequence of moves on one side of an n4. The beginner's way to learn this is by \"translating\" 3D algorithms into RKT (although this is not the best way to think about how RKT works beacuse you can really perform any sequence of moves). Below is a simple 3 step guide to translate your algorithms into RKT.</p> <p>Example: Sune algorithm with RKT</p> <p>Say you want to do the Sune algorithm <code>R U R' U R U2 R'</code> with RKT. The first step is to try and think of how you can execute the algorithm using only R moves and cube rotations. <code>R U R' U R U2 R'</code> becomes <code>R z R z' R' z R z' R z R2 z' R'</code>. Now we replace R with RO, and cube rotations with I cell rotations: <code>RO IF RO IF' RO' IF RO IF' RO IF RO2 IF' RO'</code> </p> <p></p> <ol> <li>Rewrite the algorithm to only use cube rotations and R moves</li> <li>Rewrite cube rotations in this new algorithm (<code>x</code>, <code>y</code>, or <code>z</code>) to their respective I cell rotation (<code>IR</code>, <code>IU</code>, <code>IF</code>)</li> <li>Replace all R moves with their RO counterpart</li> </ol> <p>This can definitely be very confusing and disorienting to beginners, as you have to think about 3x3x3 moves with only R moves and rotations. It takes a lot of practice to get comfortable with RKT, but it is an extremely powerful technique.</p> <p>The best way to learn RKT before doing your first 34 solve is by manually scrambling the last cell using any RO moves and random I cell rotations until it looks scrambled. Then practice doing PLC by solving it with RKT.</p> <p>Tip</p> <p>Even though this technique is called RKT, it is not limited to those types of turns. Thus, you can use LO and I- moves instead, or rotate your view and use RU and D- instead of RK and I-.</p> <p>Another popular way to do RKT is to use wide O cell turns (instead of normal I cell turns). This has the benefit of keeping the cell you're doing RKT to in the same orientation the entire time. Instead of rotating a side of the I cell to the RI plane, you rotate all the outside layers over the side that you're twisting.</p>"},{"location":"techniques/rkt/#parity","title":"Parity","text":"<p>RKT Parity</p> <p></p> <p>RKT parity is a state you can get to that appears to rotate a single layer of a cell by 180\u00b0.  If you try and fix this with RKT, then the outer layers will be off by 180\u00b0. This means that you must use an algorithm (or intuition) to solve it.</p> <p>You can use a 3D supercube algorithm that rotates the U center 180\u00b0 (<code>5x(R U R' U)</code>, or <code>2x(L R U2 R' L' U)</code>).</p> <p>Harder to memorize (but much lower in movecount) is this 9-mover RKT parity alg: <code>IU UR IU' IF' UO' IF RF UR RF' UIR</code>, found by Tetrian22.</p> <ul> <li>34 Commutators List by Alvin (RKT parity algs are near the bottom)</li> <li>PLL + RKT parity algs by Eff</li> </ul> <p>On 24, the algorithm is shorter because it doesn't have to worry about messing up other pieces besides corners. A commonly used one is <code>R2 B2 R2 U R2 B2 R2 U'</code>RKT.</p> <p>On bigger n4 puzzles (where \\(n&gt;3\\)), it can look like a single slice layer of a cell is off by 180\u00b0. An intuitive way to solve this is to do the 24 RKT parity algorithm with wide moves, and then the normal 34 RKT parity algorithm. It can also be avoided by just lining up your slice the same way you line up centers in 3D before finishing last 4 edges (when using freeslice).</p> <p><code>[f' r': [[r' U' l': D2], Iy2]]</code>(swaps UF and UR) </p>"},{"location":"techniques/rkt/#debt","title":"Debt","text":"<p>RKT Debt is when the R cell isn't aligned with the rest of the puzzle aftering performing an algorithm or sequence of moves with RKT. For example: after executing a T perm algorithm with RKT the R cell will be misaligned by 90\u00b0. RKT Debt always has to be \"paid back\" at some point during the solve. During complicated setup moves for fancy inserts, RKT debt can be used as \"ammo\". That is, undoing the debt in a useful way to help solve the puzzle. An easy way for beginners to \"avoid\" debt is to just do a move on a layer that you don't care about messing up at that point in the solve. For example: in a CFOP solve during the final F2L-b pair insertion, you could do any U* move that fixes the debt.</p>"},{"location":"techniques/rkt/#cancels","title":"Cancels","text":"<p>Sune with RKT: left = normal RKT, right = RKT cancel</p> <p></p> <p>RKT cancelling is a technique that reduces the move count of certain RKT algorithms and triggers by abusing symmetry of rotations. HactarCE made a program called RocKeT to find cancels for 34 algorithms. Often, it just involves inserting some flipping moves at certain points throughout the algorithm.</p> <p>Consider <code>R U R' U'</code>. Conventional RKT rotates after every move, but we don't have to do that. We can build up multiple moves of RKT debt and then cancel them later:</p> <ul> <li><code>RO UO</code> \u2014 do <code>R U</code> using RKT, building up two moves of RKT debt (<code>R U</code>)</li> <li><code>IF RO'</code> \u2014 do <code>R'</code> using RKT, undoing the debt from <code>U</code></li> <li><code>IF2 UO'</code> \u2014 do  <code>U'</code> using RKT, undoing the debt from the <code>R</code></li> </ul> <p>But we can do even better!</p> <ul> <li><code>RO UO</code> \u2014 do <code>R U</code> using RKT</li> <li><code>IUR</code> \u2014 swap <code>R</code> with <code>U</code></li> <li><code>UO' RO'</code> \u2014 do <code>R' U'</code> using RKT (because we swapped <code>R</code> and <code>U</code>), undoing the debt from <code>R U</code></li> </ul> <p>If you squint, you might notice that this is a conjugate <code>[RO UO: IUR]</code>. This corresponds to the fact that <code>R U R' U'</code> can be written as a conjugate where one part is a pure rotation: <code>[R U: z x2]</code>. When executing this algorithm, we apply it to <code>I</code> with the rotation (so it's equivalent to <code>R U R' U'</code>) and to the outer layers without the rotation (so <code>[RU: _]</code> expands to <code>R U U' R'</code>, which completely cancels out). This is the fundamental theory behind how to do RKT cancels: by rewriting algorithms as conjugates and commutators with pure rotations.</p> <p>Recall how in 3D you can replace a <code>U y'</code> with <code>Dw</code>. We can do the same thing here: replace <code>IUR</code> with <code>{1-2}OUR</code>, which is a rotation of the outer layers instead of the inner layers. Now it just looks like a normal algorithm with a flip thrown in the middle: <code>RO UO {1-2}OUR RO' UO'</code>. So we can notate it a little more simply: <code>R U {1-2}OUR R' U'</code></p> <p>Here's a more complex example, the Sune algorithm: <code>RO UO RO' {1-2}OUR UO RO {1-2}OUR UO2 RO'</code>. This works because you can rewrite Sune using conjugates with rotations: <code>[R U: [R': z x2] [U: z x2]]</code>. Notice how if you remove the rotations, the whole thing cancels out. (You don't need to expand the conjugates to see this.)</p>"},{"location":"techniques/rkt/#simultaneous-rkt","title":"Simultaneous RKT","text":"<p>RKT can be done by using 2 opposite sides (e.g. <code>RO</code> and <code>LO</code> turns) as well as normal I cell turns. This would allow you to execute <code>&lt;R,U,L&gt;</code> gen algorithms easier, at the cost of having to fix RKT debt on both layers. Another interesting way to do this is in a method like Belt Method. After solving the belt, orienting opposite sides, and separating the colours, the user is left with solving 2 opposite cells that can be solved simultaneously using RKT. If you turn one of the sides with the belt going through it, it essentially does a twist to both cells. One case that can be annoying is if you want to do a 180\u00b0 turn on one side, and a 90\u00b0 turn on the other (you would have to wait until both cells' debt lined up).</p>"},{"location":"techniques/rkt/#higher-dimensional-rkt","title":"Higher Dimensional RKT","text":"<p>The term Double/Triple/Quadruple/etc... RKT is used to refer to using RKT to do RKT in 5D+ puzzles. Because RKT lets us treat a single side of an nd like an nd-1, using RKT on the 35 lets us treat a single 4D cell as a 34. And if you know how to use RKT to treat a 34 like a 33, then you can do Double RKT. This generalizes to any number of dimensions, but the movecount doubles each time, making it impractical. This is why bigger nd puzzles are mostly solved using commutators.</p>"},{"location":"techniques/rkt/#rkt-in-3d","title":"RKT in 3D","text":"<p>If RKT treats a single layer of an nd puzzle like an nd-1 puzzle, then technically the last step of the 33 Roux method counts as RKT. The last step of Roux is to permute the M-slice like a 32 (with mirroring moves allowed).</p> <p>Another thing that \"feels like RKT\" is solving 3x3xn cuboids where \\(n&gt;3\\). A typical strategy for these is to solve from the innermost layers to the outermost layers, treating it as several nested 3x3x2 puzzles. Doing an R2 on the whole puzzle does an R2 to each of the subpuzzles.</p>"}]}